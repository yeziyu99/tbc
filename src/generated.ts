// Generated by @wagmi/cli@0.1.15 on 4/27/2023 at 1:54:54 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Aggregator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const aggregatorABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'ChainlinkCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'ChainlinkFulfilled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'ChainlinkRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LinkPriceFeedUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MinAnswersUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NodeAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'oldNode',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NodeRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'oldNode',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newNode',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'NodeReplaced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PairsStorageUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'request',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'node', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referencePrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'linkFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'job', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Aggregator.OrderType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'nodesCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'linkFeePerNode',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceRequested',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'a', internalType: 'address', type: 'address' }],
    name: 'addNode',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimBackLink',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fulfill',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      {
        name: 'orderType',
        internalType: 'enum Aggregator.OrderType',
        type: 'uint8',
      },
      { name: 'leveragedPosDai', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_linkToken', internalType: 'address', type: 'address' },
      { name: '_storageT', internalType: 'address', type: 'address' },
      { name: '_pairsStorage', internalType: 'address', type: 'address' },
      { name: '_linkPriceFeed', internalType: 'address', type: 'address' },
      { name: '_minAnswers', internalType: 'uint256', type: 'uint256' },
      { name: '_nodes', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'leveragedPosDai', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'linkFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'linkPriceFeed',
    outputs: [
      {
        name: '',
        internalType: 'contract AggregatorV3Interface',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minAnswers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'nodes',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pairIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'openFeeP',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'orderIdByRequest',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'orders',
    outputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      {
        name: 'orderType',
        internalType: 'enum Aggregator.OrderType',
        type: 'uint8',
      },
      { name: 'linkFeePerNode', internalType: 'uint256', type: 'uint256' },
      { name: 'initiated', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ordersAnswers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pairsStorage',
    outputs: [
      { name: '', internalType: 'contract IPairsStorage', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'pendingSlOrders',
    outputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'buy', internalType: 'bool', type: 'bool' },
      { name: 'newSl', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'removeNode',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'a', internalType: 'address', type: 'address' },
    ],
    name: 'replaceNode',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'storageT',
    outputs: [
      { name: '', internalType: 'contract ITradingStorage', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'orderId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'p',
        internalType: 'struct Aggregator.PendingSl',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'newSl', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'storePendingSlOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'orderId', internalType: 'uint256', type: 'uint256' }],
    name: 'unregisterPendingSlOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'value',
        internalType: 'contract AggregatorV3Interface',
        type: 'address',
      },
    ],
    name: 'updateLinkPriceFeed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'updateMinAnswers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'value',
        internalType: 'contract IPairsStorage',
        type: 'address',
      },
    ],
    name: 'updatePairsStorage',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PairInfos
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pairInfosABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccRolloverFeesStored',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'long', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'collateral',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'percentProfit',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'rolloverFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeesCharged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ManagerUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MaxNegativePnlOnOpenPUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'struct PairInfos.PairParams',
        type: 'tuple',
        components: [
          {
            name: 'rolloverFeePerBlockP',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'PairParamsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RolloverFeePerBlockPUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'rollover',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TradeInitialAccFeesStored',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pairIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getAccRolloverFees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pairIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getAccRolloverFeesUpdateBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'indices', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'getPairInfos',
    outputs: [
      {
        name: '',
        internalType: 'struct PairInfos.PairParams[]',
        type: 'tuple[]',
        components: [
          {
            name: 'rolloverFeePerBlockP',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      {
        name: '',
        internalType: 'struct PairInfos.PairRolloverFees[]',
        type: 'tuple[]',
        components: [
          {
            name: 'accPerCollateral',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'lastUpdateBlock', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pairIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getPendingAccRolloverFees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pairIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getRolloverFeePerBlockP',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTradeInitialAccRolloverFeesPerCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'long', internalType: 'bool', type: 'bool' },
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTradeLiquidationPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'long', internalType: 'bool', type: 'bool' },
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
      { name: 'rolloverFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTradeLiquidationPricePure',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTradeOpenedAfterUpdate',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTradeRolloverFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'accRolloverFeesPerCollateral',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'endAccRolloverFeesPerCollateral',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTradeRolloverFeePure',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'long', internalType: 'bool', type: 'bool' },
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
      { name: 'percentProfit', internalType: 'int256', type: 'int256' },
      { name: 'closingFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTradeValue',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: 'percentProfit', internalType: 'int256', type: 'int256' },
      { name: 'rolloverFee', internalType: 'uint256', type: 'uint256' },
      { name: 'closingFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTradeValuePure',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_storageT', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'manager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxNegativePnlOnOpenP',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'pairParams',
    outputs: [
      {
        name: 'rolloverFeePerBlockP',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'pairRolloverFees',
    outputs: [
      { name: 'accPerCollateral', internalType: 'uint256', type: 'uint256' },
      { name: 'lastUpdateBlock', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_manager', internalType: 'address', type: 'address' }],
    name: 'setManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxNegativePnlOnOpenP',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      {
        name: 'value',
        internalType: 'struct PairInfos.PairParams',
        type: 'tuple',
        components: [
          {
            name: 'rolloverFeePerBlockP',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'setPairParams',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'indices', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'values',
        internalType: 'struct PairInfos.PairParams[]',
        type: 'tuple[]',
        components: [
          {
            name: 'rolloverFeePerBlockP',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'setPairParamsArray',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRolloverFeePerBlockP',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'indices', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setRolloverFeePerBlockPArray',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'storageT',
    outputs: [
      { name: '', internalType: 'contract ITradingStorage', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'storeTradeInitialAccFees',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tradeInitialAccFees',
    outputs: [
      { name: 'rollover', internalType: 'uint256', type: 'uint256' },
      { name: 'openedAfterUpdate', internalType: 'bool', type: 'bool' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Trading
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tradingABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_storageT',
        internalType: 'contract ITradingStorage',
        type: 'address',
      },
      {
        name: '_pairInfos',
        internalType: 'contract IPairInfos',
        type: 'address',
      },
      { name: '_maxPosDai', internalType: 'uint256', type: 'uint256' },
      {
        name: '_limitOrdersTimelock',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_marketOrdersTimeout',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'order',
        internalType: 'struct ITradingStorage.PendingMarketOrder',
        type: 'tuple',
        components: [
          {
            name: 'trade',
            internalType: 'struct ITradingStorage.Trade',
            type: 'tuple',
            components: [
              { name: 'trader', internalType: 'address', type: 'address' },
              { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
              { name: 'index', internalType: 'uint256', type: 'uint256' },
              {
                name: 'initialPosSizeDai',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'positionSizeDai',
                internalType: 'uint256',
                type: 'uint256',
              },
              { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
              { name: 'buy', internalType: 'bool', type: 'bool' },
              { name: 'leverage', internalType: 'uint256', type: 'uint256' },
              { name: 'tp', internalType: 'uint256', type: 'uint256' },
              { name: 'sl', internalType: 'uint256', type: 'uint256' },
            ],
          },
          { name: 'block', internalType: 'uint256', type: 'uint256' },
          { name: 'wantedPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'slippageP', internalType: 'uint256', type: 'uint256' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
    ],
    name: 'ChainlinkCallbackTimeout',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CouldNotCloseTrade',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'done', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'Done',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'botHolder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'LimitOrderInitiated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'open', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'MarketOrderInitiated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NumberUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'OpenLimitCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'OpenLimitPlaced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newTp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newSl',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'OpenLimitUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newSl',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SlUpdateInitiated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newSl',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SlUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newTp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TpUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_msgSender',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cancelOpenLimitOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'closeTradeMarket',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_order', internalType: 'uint256', type: 'uint256' }],
    name: 'closeTradeMarketTimeout',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'call_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'delegatedAction',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'delegations',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'done',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'orderType',
        internalType: 'enum ITradingStorage.LimitOrder',
        type: 'uint8',
      },
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'executeLimitOrder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isDone',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isPaused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'limitOrdersTimelock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'marketOrdersTimeout',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxPosDai',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 't',
        internalType: 'struct ITradingStorage.Trade',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialPosSizeDai',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'positionSizeDai', internalType: 'uint256', type: 'uint256' },
          { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'orderType',
        internalType: 'enum ITradingStorage.OpenLimitOrderType',
        type: 'uint8',
      },
      { name: 'slippageP', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'openTrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_order', internalType: 'uint256', type: 'uint256' }],
    name: 'openTradeMarketTimeout',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pairInfos',
    outputs: [
      { name: '', internalType: 'contract IPairInfos', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegate', internalType: 'address', type: 'address' }],
    name: 'setDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setLimitOrdersTimelock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setMarketOrdersTimeout',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxPosDai',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'storageT',
    outputs: [
      { name: '', internalType: 'contract ITradingStorage', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
      { name: 'tp', internalType: 'uint256', type: 'uint256' },
      { name: 'sl', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateOpenLimitOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'newSl', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateSl',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'newTp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateTp',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TradingCallbacks
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tradingCallbacksABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'valueDai',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DaiVaultFeeCharged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'valueDai',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DevGovFeeCharged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'done', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'Done',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'limitIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 't',
        internalType: 'struct ITradingStorage.Trade',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialPosSizeDai',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'positionSizeDai', internalType: 'uint256', type: 'uint256' },
          { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'botHolder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum ITradingStorage.LimitOrder',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'positionSizeDai',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'percentProfit',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'daiSentToTrader',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LimitExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketCloseCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 't',
        internalType: 'struct ITradingStorage.Trade',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialPosSizeDai',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'positionSizeDai', internalType: 'uint256', type: 'uint256' },
          { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      { name: 'open', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'positionSizeDai',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'percentProfit',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'daiSentToTrader',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'MarketOpenCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paused', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'Pause',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SlCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'orderId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'trader',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newSl',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SlUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'a',
        internalType: 'struct ICallbacks.AggregatorAnswer',
        type: 'tuple',
        components: [
          { name: 'orderId', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'spreadP', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'closeTradeMarketCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'done',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'a',
        internalType: 'struct ICallbacks.AggregatorAnswer',
        type: 'tuple',
        components: [
          { name: 'orderId', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'spreadP', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'executeCloseLimitOrderCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'a',
        internalType: 'struct ICallbacks.AggregatorAnswer',
        type: 'tuple',
        components: [
          { name: 'orderId', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'spreadP', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'executeOpenLimitOrderCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_storageT',
        internalType: 'contract ITradingStorage',
        type: 'address',
      },
      {
        name: '_pairInfos',
        internalType: 'contract IPairInfos',
        type: 'address',
      },
      { name: 'vaultToApprove', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isDone',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isPaused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'a',
        internalType: 'struct ICallbacks.AggregatorAnswer',
        type: 'tuple',
        components: [
          { name: 'orderId', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'spreadP', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'openTradeMarketCallback',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pairInfos',
    outputs: [
      { name: '', internalType: 'contract IPairInfos', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'storageT',
    outputs: [
      { name: '', internalType: 'contract ITradingStorage', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'a',
        internalType: 'struct ICallbacks.AggregatorAnswer',
        type: 'tuple',
        components: [
          { name: 'orderId', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'spreadP', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'updateSlCallback',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TradingStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tradingStorageABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      { name: 'a', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AddressUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'id',
        internalType: 'struct TradingStorage.TriggeredLimit',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'orderType',
            internalType: 'enum TradingStorage.LimitOrder',
            type: 'uint8',
          },
        ],
        indexed: false,
      },
    ],
    name: 'LimitOrderTriggered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NumberUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'pairIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NumberUpdatedPair',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'a', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'SupportedTokenAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'a', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TradingContractAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'a', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'TradingContractRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'id',
        internalType: 'struct TradingStorage.TriggeredLimit',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'orderType',
            internalType: 'enum TradingStorage.LimitOrder',
            type: 'uint8',
          },
        ],
        indexed: false,
      },
    ],
    name: 'TriggerUnregistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'addSupportedToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_trading', internalType: 'address', type: 'address' }],
    name: 'addTradingContract',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'callbacks',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'claimFees',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dai',
    outputs: [{ name: '', internalType: 'contract IToken', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dev',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'devFeesDai',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'firstEmptyOpenLimitIndex',
    outputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'firstEmptyTradeIndex',
    outputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_trader', internalType: 'address', type: 'address' },
      { name: '_pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: '_index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getOpenLimitOrder',
    outputs: [
      {
        name: '',
        internalType: 'struct TradingStorage.OpenLimitOrder',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          { name: 'positionSize', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
          { name: 'minPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'maxPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'block', internalType: 'uint256', type: 'uint256' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOpenLimitOrders',
    outputs: [
      {
        name: '',
        internalType: 'struct TradingStorage.OpenLimitOrder[]',
        type: 'tuple[]',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          { name: 'positionSize', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
          { name: 'minPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'maxPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'block', internalType: 'uint256', type: 'uint256' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_trader', internalType: 'address', type: 'address' }],
    name: 'getPendingOrderIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSupportedTokens',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gov',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'govFeesDai',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_pairIndex', internalType: 'uint256', type: 'uint256' },
      {
        name: '_leveragedPositionSize',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_fullFee', internalType: 'bool', type: 'bool' },
    ],
    name: 'handleDevGovFees',
    outputs: [{ name: 'fee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasOpenLimitOrder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dai', internalType: 'contract IToken', type: 'address' },
      { name: '_gov', internalType: 'address', type: 'address' },
      { name: '_dev', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isTradingContract',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_id',
        internalType: 'struct TradingStorage.TriggeredLimit',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'orderType',
            internalType: 'enum TradingStorage.LimitOrder',
            type: 'uint8',
          },
        ],
      },
    ],
    name: 'isTriggered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxPendingMarketOrders',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxTradesPerPair',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nftRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'openInterestDai',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'openLimitOrderIds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'openLimitOrderTypes',
    outputs: [
      {
        name: '',
        internalType: 'enum TradingStorage.OpenLimitOrderType',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'openLimitOrders',
    outputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'positionSize', internalType: 'uint256', type: 'uint256' },
      { name: 'buy', internalType: 'bool', type: 'bool' },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
      { name: 'tp', internalType: 'uint256', type: 'uint256' },
      { name: 'sl', internalType: 'uint256', type: 'uint256' },
      { name: 'minPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'maxPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'block', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'openLimitOrdersCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'openTrades',
    outputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'initialPosSizeDai', internalType: 'uint256', type: 'uint256' },
      { name: 'positionSizeDai', internalType: 'uint256', type: 'uint256' },
      { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'buy', internalType: 'bool', type: 'bool' },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
      { name: 'tp', internalType: 'uint256', type: 'uint256' },
      { name: 'sl', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'openTradesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'openTradesInfo',
    outputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'openInterestDai', internalType: 'uint256', type: 'uint256' },
      { name: 'tpLastUpdated', internalType: 'uint256', type: 'uint256' },
      { name: 'slLastUpdated', internalType: 'uint256', type: 'uint256' },
      { name: 'beingMarketClosed', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pairTraders',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_pairIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'pairTradersArray',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pairTradersId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pendingMarketCloseCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pendingMarketOpenCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'pendingOrderIds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_trader', internalType: 'address', type: 'address' }],
    name: 'pendingOrderIdsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'priceAggregator',
    outputs: [
      { name: '', internalType: 'contract IAggregator', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_trading', internalType: 'address', type: 'address' }],
    name: 'removeTradingContract',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'reqID_pendingLimitOrder',
    outputs: [
      { name: 'botHolder', internalType: 'address', type: 'address' },
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      {
        name: 'orderType',
        internalType: 'enum TradingStorage.LimitOrder',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'reqID_pendingMarketOrder',
    outputs: [
      {
        name: 'trade',
        internalType: 'struct TradingStorage.Trade',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialPosSizeDai',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'positionSizeDai', internalType: 'uint256', type: 'uint256' },
          { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'block', internalType: 'uint256', type: 'uint256' },
      { name: 'wantedPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'slippageP', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_callbacks', internalType: 'address', type: 'address' }],
    name: 'setCallbacks',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_dev', internalType: 'address', type: 'address' }],
    name: 'setDev',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gov', internalType: 'address', type: 'address' }],
    name: 'setGov',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: '_newMaxOpenInterest', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxOpenInterestDai',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_maxPendingMarketOrders',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setMaxPendingMarketOrders',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_maxTradesPerPair', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxTradesPerPair',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_trader', internalType: 'address', type: 'address' },
      { name: '_pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: '_index', internalType: 'uint256', type: 'uint256' },
      {
        name: '_type',
        internalType: 'enum TradingStorage.OpenLimitOrderType',
        type: 'uint8',
      },
    ],
    name: 'setOpenLimitOrderType',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_aggregator', internalType: 'address', type: 'address' }],
    name: 'setPriceAggregator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_trading', internalType: 'address', type: 'address' }],
    name: 'setTrading',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_vault', internalType: 'address', type: 'address' }],
    name: 'setVault',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_id',
        internalType: 'struct TradingStorage.TriggeredLimit',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'orderType',
            internalType: 'enum TradingStorage.LimitOrder',
            type: 'uint8',
          },
        ],
      },
    ],
    name: 'storeLimitOrderToTrigger',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'o',
        internalType: 'struct TradingStorage.OpenLimitOrder',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          { name: 'positionSize', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
          { name: 'minPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'maxPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'block', internalType: 'uint256', type: 'uint256' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'storeOpenLimitOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_limitOrder',
        internalType: 'struct TradingStorage.PendingLimitOrder',
        type: 'tuple',
        components: [
          { name: 'botHolder', internalType: 'address', type: 'address' },
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'orderType',
            internalType: 'enum TradingStorage.LimitOrder',
            type: 'uint8',
          },
        ],
      },
      { name: '_orderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'storePendingLimitOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_order',
        internalType: 'struct TradingStorage.PendingMarketOrder',
        type: 'tuple',
        components: [
          {
            name: 'trade',
            internalType: 'struct TradingStorage.Trade',
            type: 'tuple',
            components: [
              { name: 'trader', internalType: 'address', type: 'address' },
              { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
              { name: 'index', internalType: 'uint256', type: 'uint256' },
              {
                name: 'initialPosSizeDai',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'positionSizeDai',
                internalType: 'uint256',
                type: 'uint256',
              },
              { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
              { name: 'buy', internalType: 'bool', type: 'bool' },
              { name: 'leverage', internalType: 'uint256', type: 'uint256' },
              { name: 'tp', internalType: 'uint256', type: 'uint256' },
              { name: 'sl', internalType: 'uint256', type: 'uint256' },
            ],
          },
          { name: 'block', internalType: 'uint256', type: 'uint256' },
          { name: 'wantedPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'slippageP', internalType: 'uint256', type: 'uint256' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_id', internalType: 'uint256', type: 'uint256' },
      { name: '_open', internalType: 'bool', type: 'bool' },
    ],
    name: 'storePendingMarketOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_trade',
        internalType: 'struct TradingStorage.Trade',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialPosSizeDai',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'positionSizeDai', internalType: 'uint256', type: 'uint256' },
          { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: '_tradeInfo',
        internalType: 'struct TradingStorage.TradeInfo',
        type: 'tuple',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'openInterestDai', internalType: 'uint256', type: 'uint256' },
          { name: 'tpLastUpdated', internalType: 'uint256', type: 'uint256' },
          { name: 'slLastUpdated', internalType: 'uint256', type: 'uint256' },
          { name: 'beingMarketClosed', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'storeTrade',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'supportedTokens',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'trading',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferDai',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      {
        name: '',
        internalType: 'enum TradingStorage.LimitOrder',
        type: 'uint8',
      },
    ],
    name: 'triggeredLimits',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_trader', internalType: 'address', type: 'address' },
      { name: '_pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: '_index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unregisterOpenLimitOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_order', internalType: 'uint256', type: 'uint256' }],
    name: 'unregisterPendingLimitOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_id', internalType: 'uint256', type: 'uint256' },
      { name: '_open', internalType: 'bool', type: 'bool' },
    ],
    name: 'unregisterPendingMarketOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'trader', internalType: 'address', type: 'address' },
      { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unregisterTrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_id',
        internalType: 'struct TradingStorage.TriggeredLimit',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'orderType',
            internalType: 'enum TradingStorage.LimitOrder',
            type: 'uint8',
          },
        ],
      },
    ],
    name: 'unregisterTrigger',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_o',
        internalType: 'struct TradingStorage.OpenLimitOrder',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          { name: 'positionSize', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
          { name: 'minPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'maxPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'block', internalType: 'uint256', type: 'uint256' },
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'updateOpenLimitOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_trader', internalType: 'address', type: 'address' },
      { name: '_pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: '_index', internalType: 'uint256', type: 'uint256' },
      { name: '_newSl', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateSl',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_trader', internalType: 'address', type: 'address' },
      { name: '_pairIndex', internalType: 'uint256', type: 'uint256' },
      { name: '_index', internalType: 'uint256', type: 'uint256' },
      { name: '_newTp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateTp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_t',
        internalType: 'struct TradingStorage.Trade',
        type: 'tuple',
        components: [
          { name: 'trader', internalType: 'address', type: 'address' },
          { name: 'pairIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'index', internalType: 'uint256', type: 'uint256' },
          {
            name: 'initialPosSizeDai',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'positionSizeDai', internalType: 'uint256', type: 'uint256' },
          { name: 'openPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'buy', internalType: 'bool', type: 'bool' },
          { name: 'leverage', internalType: 'uint256', type: 'uint256' },
          { name: 'tp', internalType: 'uint256', type: 'uint256' },
          { name: 'sl', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'updateTrade',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vault',
    outputs: [{ name: '', internalType: 'contract IVault', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vaultABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'assets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'assetsLessDeplete',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AssetsReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AssetsSent',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'asset',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'convertToAssets',
    outputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'convertToShares',
    outputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'deposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'distributeReward',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maxDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maxMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'maxRedeem',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'maxWithdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'mint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'previewDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'previewMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'previewRedeem',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'previewWithdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'receiveAssets',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'redeem',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'sendAssets',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalAssets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalClosedPnl',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLiability',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'withdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link aggregatorABI}__.
 */
export function useAggregator(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: aggregatorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__.
 */
export function useAggregatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof aggregatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    ...config,
  } as UseContractReadConfig<typeof aggregatorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"linkFee"`.
 */
export function useAggregatorLinkFee<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'linkFee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'linkFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'linkFee',
    ...config,
  } as UseContractReadConfig<typeof aggregatorABI, 'linkFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"linkPriceFeed"`.
 */
export function useAggregatorLinkPriceFeed<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'linkPriceFeed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'linkPriceFeed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'linkPriceFeed',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorABI,
    'linkPriceFeed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"minAnswers"`.
 */
export function useAggregatorMinAnswers<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'minAnswers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'minAnswers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'minAnswers',
    ...config,
  } as UseContractReadConfig<typeof aggregatorABI, 'minAnswers', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"nodes"`.
 */
export function useAggregatorNodes<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'nodes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'nodes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'nodes',
    ...config,
  } as UseContractReadConfig<typeof aggregatorABI, 'nodes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"openFeeP"`.
 */
export function useAggregatorOpenFeeP<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'openFeeP'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'openFeeP', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'openFeeP',
    ...config,
  } as UseContractReadConfig<typeof aggregatorABI, 'openFeeP', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"orderIdByRequest"`.
 */
export function useAggregatorOrderIdByRequest<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'orderIdByRequest'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof aggregatorABI,
      'orderIdByRequest',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'orderIdByRequest',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorABI,
    'orderIdByRequest',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"orders"`.
 */
export function useAggregatorOrders<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'orders'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'orders', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'orders',
    ...config,
  } as UseContractReadConfig<typeof aggregatorABI, 'orders', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"ordersAnswers"`.
 */
export function useAggregatorOrdersAnswers<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'ordersAnswers'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'ordersAnswers', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'ordersAnswers',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorABI,
    'ordersAnswers',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"pairsStorage"`.
 */
export function useAggregatorPairsStorage<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'pairsStorage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'pairsStorage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'pairsStorage',
    ...config,
  } as UseContractReadConfig<typeof aggregatorABI, 'pairsStorage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"pendingSlOrders"`.
 */
export function useAggregatorPendingSlOrders<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'pendingSlOrders'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'pendingSlOrders', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'pendingSlOrders',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorABI,
    'pendingSlOrders',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"storageT"`.
 */
export function useAggregatorStorageT<
  TSelectData = ReadContractResult<typeof aggregatorABI, 'storageT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof aggregatorABI, 'storageT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorABI,
    functionName: 'storageT',
    ...config,
  } as UseContractReadConfig<typeof aggregatorABI, 'storageT', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__.
 */
export function useAggregatorWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof aggregatorABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof aggregatorABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, TFunctionName>({
    abi: aggregatorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"addNode"`.
 */
export function useAggregatorAddNode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof aggregatorABI, 'addNode'>['abi'],
        'addNode'
      > & { functionName?: 'addNode' }
    : UseContractWriteConfig<TMode, typeof aggregatorABI, 'addNode'> & {
        abi?: never
        functionName?: 'addNode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'addNode'>({
    abi: aggregatorABI,
    functionName: 'addNode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"claimBackLink"`.
 */
export function useAggregatorClaimBackLink<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aggregatorABI,
          'claimBackLink'
        >['abi'],
        'claimBackLink'
      > & { functionName?: 'claimBackLink' }
    : UseContractWriteConfig<TMode, typeof aggregatorABI, 'claimBackLink'> & {
        abi?: never
        functionName?: 'claimBackLink'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'claimBackLink'>({
    abi: aggregatorABI,
    functionName: 'claimBackLink',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"fulfill"`.
 */
export function useAggregatorFulfill<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof aggregatorABI, 'fulfill'>['abi'],
        'fulfill'
      > & { functionName?: 'fulfill' }
    : UseContractWriteConfig<TMode, typeof aggregatorABI, 'fulfill'> & {
        abi?: never
        functionName?: 'fulfill'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'fulfill'>({
    abi: aggregatorABI,
    functionName: 'fulfill',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"getPrice"`.
 */
export function useAggregatorGetPrice<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof aggregatorABI, 'getPrice'>['abi'],
        'getPrice'
      > & { functionName?: 'getPrice' }
    : UseContractWriteConfig<TMode, typeof aggregatorABI, 'getPrice'> & {
        abi?: never
        functionName?: 'getPrice'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'getPrice'>({
    abi: aggregatorABI,
    functionName: 'getPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"initialize"`.
 */
export function useAggregatorInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof aggregatorABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof aggregatorABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'initialize'>({
    abi: aggregatorABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"removeNode"`.
 */
export function useAggregatorRemoveNode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof aggregatorABI, 'removeNode'>['abi'],
        'removeNode'
      > & { functionName?: 'removeNode' }
    : UseContractWriteConfig<TMode, typeof aggregatorABI, 'removeNode'> & {
        abi?: never
        functionName?: 'removeNode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'removeNode'>({
    abi: aggregatorABI,
    functionName: 'removeNode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"replaceNode"`.
 */
export function useAggregatorReplaceNode<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof aggregatorABI, 'replaceNode'>['abi'],
        'replaceNode'
      > & { functionName?: 'replaceNode' }
    : UseContractWriteConfig<TMode, typeof aggregatorABI, 'replaceNode'> & {
        abi?: never
        functionName?: 'replaceNode'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'replaceNode'>({
    abi: aggregatorABI,
    functionName: 'replaceNode',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"storePendingSlOrder"`.
 */
export function useAggregatorStorePendingSlOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aggregatorABI,
          'storePendingSlOrder'
        >['abi'],
        'storePendingSlOrder'
      > & { functionName?: 'storePendingSlOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof aggregatorABI,
        'storePendingSlOrder'
      > & {
        abi?: never
        functionName?: 'storePendingSlOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'storePendingSlOrder'>({
    abi: aggregatorABI,
    functionName: 'storePendingSlOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"unregisterPendingSlOrder"`.
 */
export function useAggregatorUnregisterPendingSlOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aggregatorABI,
          'unregisterPendingSlOrder'
        >['abi'],
        'unregisterPendingSlOrder'
      > & { functionName?: 'unregisterPendingSlOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof aggregatorABI,
        'unregisterPendingSlOrder'
      > & {
        abi?: never
        functionName?: 'unregisterPendingSlOrder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof aggregatorABI,
    'unregisterPendingSlOrder'
  >({
    abi: aggregatorABI,
    functionName: 'unregisterPendingSlOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"updateLinkPriceFeed"`.
 */
export function useAggregatorUpdateLinkPriceFeed<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aggregatorABI,
          'updateLinkPriceFeed'
        >['abi'],
        'updateLinkPriceFeed'
      > & { functionName?: 'updateLinkPriceFeed' }
    : UseContractWriteConfig<
        TMode,
        typeof aggregatorABI,
        'updateLinkPriceFeed'
      > & {
        abi?: never
        functionName?: 'updateLinkPriceFeed'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'updateLinkPriceFeed'>({
    abi: aggregatorABI,
    functionName: 'updateLinkPriceFeed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"updateMinAnswers"`.
 */
export function useAggregatorUpdateMinAnswers<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aggregatorABI,
          'updateMinAnswers'
        >['abi'],
        'updateMinAnswers'
      > & { functionName?: 'updateMinAnswers' }
    : UseContractWriteConfig<
        TMode,
        typeof aggregatorABI,
        'updateMinAnswers'
      > & {
        abi?: never
        functionName?: 'updateMinAnswers'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'updateMinAnswers'>({
    abi: aggregatorABI,
    functionName: 'updateMinAnswers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"updatePairsStorage"`.
 */
export function useAggregatorUpdatePairsStorage<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof aggregatorABI,
          'updatePairsStorage'
        >['abi'],
        'updatePairsStorage'
      > & { functionName?: 'updatePairsStorage' }
    : UseContractWriteConfig<
        TMode,
        typeof aggregatorABI,
        'updatePairsStorage'
      > & {
        abi?: never
        functionName?: 'updatePairsStorage'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof aggregatorABI, 'updatePairsStorage'>({
    abi: aggregatorABI,
    functionName: 'updatePairsStorage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__.
 */
export function usePrepareAggregatorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"addNode"`.
 */
export function usePrepareAggregatorAddNode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'addNode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'addNode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, 'addNode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"claimBackLink"`.
 */
export function usePrepareAggregatorClaimBackLink(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'claimBackLink'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'claimBackLink',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, 'claimBackLink'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"fulfill"`.
 */
export function usePrepareAggregatorFulfill(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'fulfill'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'fulfill',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, 'fulfill'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"getPrice"`.
 */
export function usePrepareAggregatorGetPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'getPrice'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'getPrice',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, 'getPrice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAggregatorInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"removeNode"`.
 */
export function usePrepareAggregatorRemoveNode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'removeNode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'removeNode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, 'removeNode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"replaceNode"`.
 */
export function usePrepareAggregatorReplaceNode(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'replaceNode'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'replaceNode',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, 'replaceNode'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"storePendingSlOrder"`.
 */
export function usePrepareAggregatorStorePendingSlOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'storePendingSlOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'storePendingSlOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof aggregatorABI,
    'storePendingSlOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"unregisterPendingSlOrder"`.
 */
export function usePrepareAggregatorUnregisterPendingSlOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof aggregatorABI,
      'unregisterPendingSlOrder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'unregisterPendingSlOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof aggregatorABI,
    'unregisterPendingSlOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"updateLinkPriceFeed"`.
 */
export function usePrepareAggregatorUpdateLinkPriceFeed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'updateLinkPriceFeed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'updateLinkPriceFeed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof aggregatorABI,
    'updateLinkPriceFeed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"updateMinAnswers"`.
 */
export function usePrepareAggregatorUpdateMinAnswers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'updateMinAnswers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'updateMinAnswers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggregatorABI, 'updateMinAnswers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggregatorABI}__ and `functionName` set to `"updatePairsStorage"`.
 */
export function usePrepareAggregatorUpdatePairsStorage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggregatorABI, 'updatePairsStorage'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: aggregatorABI,
    functionName: 'updatePairsStorage',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof aggregatorABI,
    'updatePairsStorage'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__.
 */
export function useAggregatorEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"ChainlinkCancelled"`.
 */
export function useAggregatorChainlinkCancelledEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'ChainlinkCancelled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'ChainlinkCancelled',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'ChainlinkCancelled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"ChainlinkFulfilled"`.
 */
export function useAggregatorChainlinkFulfilledEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'ChainlinkFulfilled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'ChainlinkFulfilled',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'ChainlinkFulfilled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"ChainlinkRequested"`.
 */
export function useAggregatorChainlinkRequestedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'ChainlinkRequested'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'ChainlinkRequested',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'ChainlinkRequested'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAggregatorInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"LinkPriceFeedUpdated"`.
 */
export function useAggregatorLinkPriceFeedUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'LinkPriceFeedUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'LinkPriceFeedUpdated',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'LinkPriceFeedUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"MinAnswersUpdated"`.
 */
export function useAggregatorMinAnswersUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'MinAnswersUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'MinAnswersUpdated',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'MinAnswersUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"NodeAdded"`.
 */
export function useAggregatorNodeAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'NodeAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'NodeAdded',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'NodeAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"NodeRemoved"`.
 */
export function useAggregatorNodeRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'NodeRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'NodeRemoved',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'NodeRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"NodeReplaced"`.
 */
export function useAggregatorNodeReplacedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'NodeReplaced'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'NodeReplaced',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'NodeReplaced'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"PairsStorageUpdated"`.
 */
export function useAggregatorPairsStorageUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'PairsStorageUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'PairsStorageUpdated',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'PairsStorageUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"PriceReceived"`.
 */
export function useAggregatorPriceReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'PriceReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'PriceReceived',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'PriceReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggregatorABI}__ and `eventName` set to `"PriceRequested"`.
 */
export function useAggregatorPriceRequestedEvent(
  config: Omit<
    UseContractEventConfig<typeof aggregatorABI, 'PriceRequested'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: aggregatorABI,
    eventName: 'PriceRequested',
    ...config,
  } as UseContractEventConfig<typeof aggregatorABI, 'PriceRequested'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pairInfosABI}__.
 */
export function usePairInfos(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pairInfosABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__.
 */
export function usePairInfosRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pairInfosABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairInfosABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    ...config,
  } as UseContractReadConfig<typeof pairInfosABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getAccRolloverFees"`.
 */
export function usePairInfosGetAccRolloverFees<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'getAccRolloverFees'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getAccRolloverFees',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getAccRolloverFees',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getAccRolloverFees',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getAccRolloverFeesUpdateBlock"`.
 */
export function usePairInfosGetAccRolloverFeesUpdateBlock<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'getAccRolloverFeesUpdateBlock'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getAccRolloverFeesUpdateBlock',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getAccRolloverFeesUpdateBlock',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getAccRolloverFeesUpdateBlock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getPairInfos"`.
 */
export function usePairInfosGetPairInfos<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'getPairInfos'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairInfosABI, 'getPairInfos', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getPairInfos',
    ...config,
  } as UseContractReadConfig<typeof pairInfosABI, 'getPairInfos', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getPendingAccRolloverFees"`.
 */
export function usePairInfosGetPendingAccRolloverFees<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'getPendingAccRolloverFees'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getPendingAccRolloverFees',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getPendingAccRolloverFees',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getPendingAccRolloverFees',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getRolloverFeePerBlockP"`.
 */
export function usePairInfosGetRolloverFeePerBlockP<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'getRolloverFeePerBlockP'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getRolloverFeePerBlockP',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getRolloverFeePerBlockP',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getRolloverFeePerBlockP',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeInitialAccRolloverFeesPerCollateral"`.
 */
export function usePairInfosGetTradeInitialAccRolloverFeesPerCollateral<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'getTradeInitialAccRolloverFeesPerCollateral'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getTradeInitialAccRolloverFeesPerCollateral',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getTradeInitialAccRolloverFeesPerCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getTradeInitialAccRolloverFeesPerCollateral',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeLiquidationPrice"`.
 */
export function usePairInfosGetTradeLiquidationPrice<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'getTradeLiquidationPrice'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getTradeLiquidationPrice',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getTradeLiquidationPrice',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getTradeLiquidationPrice',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeLiquidationPricePure"`.
 */
export function usePairInfosGetTradeLiquidationPricePure<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'getTradeLiquidationPricePure'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getTradeLiquidationPricePure',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getTradeLiquidationPricePure',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getTradeLiquidationPricePure',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeOpenedAfterUpdate"`.
 */
export function usePairInfosGetTradeOpenedAfterUpdate<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'getTradeOpenedAfterUpdate'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getTradeOpenedAfterUpdate',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getTradeOpenedAfterUpdate',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getTradeOpenedAfterUpdate',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeRolloverFee"`.
 */
export function usePairInfosGetTradeRolloverFee<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'getTradeRolloverFee'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getTradeRolloverFee',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getTradeRolloverFee',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getTradeRolloverFee',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeRolloverFeePure"`.
 */
export function usePairInfosGetTradeRolloverFeePure<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'getTradeRolloverFeePure'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getTradeRolloverFeePure',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getTradeRolloverFeePure',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getTradeRolloverFeePure',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeValuePure"`.
 */
export function usePairInfosGetTradeValuePure<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'getTradeValuePure'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'getTradeValuePure',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'getTradeValuePure',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'getTradeValuePure',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"manager"`.
 */
export function usePairInfosManager<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'manager'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairInfosABI, 'manager', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'manager',
    ...config,
  } as UseContractReadConfig<typeof pairInfosABI, 'manager', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"maxNegativePnlOnOpenP"`.
 */
export function usePairInfosMaxNegativePnlOnOpenP<
  TSelectData = ReadContractResult<
    typeof pairInfosABI,
    'maxNegativePnlOnOpenP'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'maxNegativePnlOnOpenP',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'maxNegativePnlOnOpenP',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'maxNegativePnlOnOpenP',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"pairParams"`.
 */
export function usePairInfosPairParams<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'pairParams'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairInfosABI, 'pairParams', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'pairParams',
    ...config,
  } as UseContractReadConfig<typeof pairInfosABI, 'pairParams', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"pairRolloverFees"`.
 */
export function usePairInfosPairRolloverFees<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'pairRolloverFees'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairInfosABI, 'pairRolloverFees', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'pairRolloverFees',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'pairRolloverFees',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"storageT"`.
 */
export function usePairInfosStorageT<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'storageT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairInfosABI, 'storageT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'storageT',
    ...config,
  } as UseContractReadConfig<typeof pairInfosABI, 'storageT', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"tradeInitialAccFees"`.
 */
export function usePairInfosTradeInitialAccFees<
  TSelectData = ReadContractResult<typeof pairInfosABI, 'tradeInitialAccFees'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pairInfosABI,
      'tradeInitialAccFees',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairInfosABI,
    functionName: 'tradeInitialAccFees',
    ...config,
  } as UseContractReadConfig<
    typeof pairInfosABI,
    'tradeInitialAccFees',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__.
 */
export function usePairInfosWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pairInfosABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pairInfosABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pairInfosABI, TFunctionName>({
    abi: pairInfosABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeValue"`.
 */
export function usePairInfosGetTradeValue<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pairInfosABI, 'getTradeValue'>['abi'],
        'getTradeValue'
      > & { functionName?: 'getTradeValue' }
    : UseContractWriteConfig<TMode, typeof pairInfosABI, 'getTradeValue'> & {
        abi?: never
        functionName?: 'getTradeValue'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pairInfosABI, 'getTradeValue'>({
    abi: pairInfosABI,
    functionName: 'getTradeValue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"initialize"`.
 */
export function usePairInfosInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pairInfosABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof pairInfosABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pairInfosABI, 'initialize'>({
    abi: pairInfosABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setManager"`.
 */
export function usePairInfosSetManager<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pairInfosABI, 'setManager'>['abi'],
        'setManager'
      > & { functionName?: 'setManager' }
    : UseContractWriteConfig<TMode, typeof pairInfosABI, 'setManager'> & {
        abi?: never
        functionName?: 'setManager'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pairInfosABI, 'setManager'>({
    abi: pairInfosABI,
    functionName: 'setManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setMaxNegativePnlOnOpenP"`.
 */
export function usePairInfosSetMaxNegativePnlOnOpenP<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pairInfosABI,
          'setMaxNegativePnlOnOpenP'
        >['abi'],
        'setMaxNegativePnlOnOpenP'
      > & { functionName?: 'setMaxNegativePnlOnOpenP' }
    : UseContractWriteConfig<
        TMode,
        typeof pairInfosABI,
        'setMaxNegativePnlOnOpenP'
      > & {
        abi?: never
        functionName?: 'setMaxNegativePnlOnOpenP'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pairInfosABI,
    'setMaxNegativePnlOnOpenP'
  >({
    abi: pairInfosABI,
    functionName: 'setMaxNegativePnlOnOpenP',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setPairParams"`.
 */
export function usePairInfosSetPairParams<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pairInfosABI, 'setPairParams'>['abi'],
        'setPairParams'
      > & { functionName?: 'setPairParams' }
    : UseContractWriteConfig<TMode, typeof pairInfosABI, 'setPairParams'> & {
        abi?: never
        functionName?: 'setPairParams'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pairInfosABI, 'setPairParams'>({
    abi: pairInfosABI,
    functionName: 'setPairParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setPairParamsArray"`.
 */
export function usePairInfosSetPairParamsArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pairInfosABI,
          'setPairParamsArray'
        >['abi'],
        'setPairParamsArray'
      > & { functionName?: 'setPairParamsArray' }
    : UseContractWriteConfig<
        TMode,
        typeof pairInfosABI,
        'setPairParamsArray'
      > & {
        abi?: never
        functionName?: 'setPairParamsArray'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pairInfosABI, 'setPairParamsArray'>({
    abi: pairInfosABI,
    functionName: 'setPairParamsArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setRolloverFeePerBlockP"`.
 */
export function usePairInfosSetRolloverFeePerBlockP<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pairInfosABI,
          'setRolloverFeePerBlockP'
        >['abi'],
        'setRolloverFeePerBlockP'
      > & { functionName?: 'setRolloverFeePerBlockP' }
    : UseContractWriteConfig<
        TMode,
        typeof pairInfosABI,
        'setRolloverFeePerBlockP'
      > & {
        abi?: never
        functionName?: 'setRolloverFeePerBlockP'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pairInfosABI,
    'setRolloverFeePerBlockP'
  >({
    abi: pairInfosABI,
    functionName: 'setRolloverFeePerBlockP',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setRolloverFeePerBlockPArray"`.
 */
export function usePairInfosSetRolloverFeePerBlockPArray<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pairInfosABI,
          'setRolloverFeePerBlockPArray'
        >['abi'],
        'setRolloverFeePerBlockPArray'
      > & { functionName?: 'setRolloverFeePerBlockPArray' }
    : UseContractWriteConfig<
        TMode,
        typeof pairInfosABI,
        'setRolloverFeePerBlockPArray'
      > & {
        abi?: never
        functionName?: 'setRolloverFeePerBlockPArray'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pairInfosABI,
    'setRolloverFeePerBlockPArray'
  >({
    abi: pairInfosABI,
    functionName: 'setRolloverFeePerBlockPArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"storeTradeInitialAccFees"`.
 */
export function usePairInfosStoreTradeInitialAccFees<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pairInfosABI,
          'storeTradeInitialAccFees'
        >['abi'],
        'storeTradeInitialAccFees'
      > & { functionName?: 'storeTradeInitialAccFees' }
    : UseContractWriteConfig<
        TMode,
        typeof pairInfosABI,
        'storeTradeInitialAccFees'
      > & {
        abi?: never
        functionName?: 'storeTradeInitialAccFees'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pairInfosABI,
    'storeTradeInitialAccFees'
  >({
    abi: pairInfosABI,
    functionName: 'storeTradeInitialAccFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__.
 */
export function usePreparePairInfosWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairInfosABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairInfosABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"getTradeValue"`.
 */
export function usePreparePairInfosGetTradeValue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairInfosABI, 'getTradeValue'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'getTradeValue',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairInfosABI, 'getTradeValue'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePairInfosInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairInfosABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairInfosABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setManager"`.
 */
export function usePreparePairInfosSetManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairInfosABI, 'setManager'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'setManager',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairInfosABI, 'setManager'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setMaxNegativePnlOnOpenP"`.
 */
export function usePreparePairInfosSetMaxNegativePnlOnOpenP(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pairInfosABI,
      'setMaxNegativePnlOnOpenP'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'setMaxNegativePnlOnOpenP',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pairInfosABI,
    'setMaxNegativePnlOnOpenP'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setPairParams"`.
 */
export function usePreparePairInfosSetPairParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairInfosABI, 'setPairParams'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'setPairParams',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairInfosABI, 'setPairParams'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setPairParamsArray"`.
 */
export function usePreparePairInfosSetPairParamsArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairInfosABI, 'setPairParamsArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'setPairParamsArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairInfosABI, 'setPairParamsArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setRolloverFeePerBlockP"`.
 */
export function usePreparePairInfosSetRolloverFeePerBlockP(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pairInfosABI,
      'setRolloverFeePerBlockP'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'setRolloverFeePerBlockP',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pairInfosABI,
    'setRolloverFeePerBlockP'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"setRolloverFeePerBlockPArray"`.
 */
export function usePreparePairInfosSetRolloverFeePerBlockPArray(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pairInfosABI,
      'setRolloverFeePerBlockPArray'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'setRolloverFeePerBlockPArray',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pairInfosABI,
    'setRolloverFeePerBlockPArray'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairInfosABI}__ and `functionName` set to `"storeTradeInitialAccFees"`.
 */
export function usePreparePairInfosStoreTradeInitialAccFees(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pairInfosABI,
      'storeTradeInitialAccFees'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairInfosABI,
    functionName: 'storeTradeInitialAccFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pairInfosABI,
    'storeTradeInitialAccFees'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__.
 */
export function usePairInfosEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    ...config,
  } as UseContractEventConfig<typeof pairInfosABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__ and `eventName` set to `"AccRolloverFeesStored"`.
 */
export function usePairInfosAccRolloverFeesStoredEvent(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, 'AccRolloverFeesStored'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    eventName: 'AccRolloverFeesStored',
    ...config,
  } as UseContractEventConfig<typeof pairInfosABI, 'AccRolloverFeesStored'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__ and `eventName` set to `"FeesCharged"`.
 */
export function usePairInfosFeesChargedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, 'FeesCharged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    eventName: 'FeesCharged',
    ...config,
  } as UseContractEventConfig<typeof pairInfosABI, 'FeesCharged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePairInfosInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pairInfosABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__ and `eventName` set to `"ManagerUpdated"`.
 */
export function usePairInfosManagerUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, 'ManagerUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    eventName: 'ManagerUpdated',
    ...config,
  } as UseContractEventConfig<typeof pairInfosABI, 'ManagerUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__ and `eventName` set to `"MaxNegativePnlOnOpenPUpdated"`.
 */
export function usePairInfosMaxNegativePnlOnOpenPUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, 'MaxNegativePnlOnOpenPUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    eventName: 'MaxNegativePnlOnOpenPUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof pairInfosABI,
    'MaxNegativePnlOnOpenPUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__ and `eventName` set to `"PairParamsUpdated"`.
 */
export function usePairInfosPairParamsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, 'PairParamsUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    eventName: 'PairParamsUpdated',
    ...config,
  } as UseContractEventConfig<typeof pairInfosABI, 'PairParamsUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__ and `eventName` set to `"RolloverFeePerBlockPUpdated"`.
 */
export function usePairInfosRolloverFeePerBlockPUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, 'RolloverFeePerBlockPUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    eventName: 'RolloverFeePerBlockPUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof pairInfosABI,
    'RolloverFeePerBlockPUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairInfosABI}__ and `eventName` set to `"TradeInitialAccFeesStored"`.
 */
export function usePairInfosTradeInitialAccFeesStoredEvent(
  config: Omit<
    UseContractEventConfig<typeof pairInfosABI, 'TradeInitialAccFeesStored'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairInfosABI,
    eventName: 'TradeInitialAccFeesStored',
    ...config,
  } as UseContractEventConfig<typeof pairInfosABI, 'TradeInitialAccFeesStored'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tradingABI}__.
 */
export function useTrading(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: tradingABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__.
 */
export function useTradingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tradingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    ...config,
  } as UseContractReadConfig<typeof tradingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"_msgSender"`.
 */
export function useTradingMsgSender<
  TSelectData = ReadContractResult<typeof tradingABI, '_msgSender'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingABI, '_msgSender', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: '_msgSender',
    ...config,
  } as UseContractReadConfig<typeof tradingABI, '_msgSender', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"delegations"`.
 */
export function useTradingDelegations<
  TSelectData = ReadContractResult<typeof tradingABI, 'delegations'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingABI, 'delegations', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: 'delegations',
    ...config,
  } as UseContractReadConfig<typeof tradingABI, 'delegations', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"isDone"`.
 */
export function useTradingIsDone<
  TSelectData = ReadContractResult<typeof tradingABI, 'isDone'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingABI, 'isDone', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: 'isDone',
    ...config,
  } as UseContractReadConfig<typeof tradingABI, 'isDone', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"isPaused"`.
 */
export function useTradingIsPaused<
  TSelectData = ReadContractResult<typeof tradingABI, 'isPaused'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingABI, 'isPaused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: 'isPaused',
    ...config,
  } as UseContractReadConfig<typeof tradingABI, 'isPaused', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"limitOrdersTimelock"`.
 */
export function useTradingLimitOrdersTimelock<
  TSelectData = ReadContractResult<typeof tradingABI, 'limitOrdersTimelock'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingABI,
      'limitOrdersTimelock',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: 'limitOrdersTimelock',
    ...config,
  } as UseContractReadConfig<
    typeof tradingABI,
    'limitOrdersTimelock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"marketOrdersTimeout"`.
 */
export function useTradingMarketOrdersTimeout<
  TSelectData = ReadContractResult<typeof tradingABI, 'marketOrdersTimeout'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingABI,
      'marketOrdersTimeout',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: 'marketOrdersTimeout',
    ...config,
  } as UseContractReadConfig<
    typeof tradingABI,
    'marketOrdersTimeout',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"maxPosDai"`.
 */
export function useTradingMaxPosDai<
  TSelectData = ReadContractResult<typeof tradingABI, 'maxPosDai'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingABI, 'maxPosDai', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: 'maxPosDai',
    ...config,
  } as UseContractReadConfig<typeof tradingABI, 'maxPosDai', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"pairInfos"`.
 */
export function useTradingPairInfos<
  TSelectData = ReadContractResult<typeof tradingABI, 'pairInfos'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingABI, 'pairInfos', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: 'pairInfos',
    ...config,
  } as UseContractReadConfig<typeof tradingABI, 'pairInfos', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"storageT"`.
 */
export function useTradingStorageT<
  TSelectData = ReadContractResult<typeof tradingABI, 'storageT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingABI, 'storageT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingABI,
    functionName: 'storageT',
    ...config,
  } as UseContractReadConfig<typeof tradingABI, 'storageT', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__.
 */
export function useTradingWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof tradingABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, TFunctionName>({
    abi: tradingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"cancelOpenLimitOrder"`.
 */
export function useTradingCancelOpenLimitOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingABI,
          'cancelOpenLimitOrder'
        >['abi'],
        'cancelOpenLimitOrder'
      > & { functionName?: 'cancelOpenLimitOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingABI,
        'cancelOpenLimitOrder'
      > & {
        abi?: never
        functionName?: 'cancelOpenLimitOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'cancelOpenLimitOrder'>({
    abi: tradingABI,
    functionName: 'cancelOpenLimitOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"closeTradeMarket"`.
 */
export function useTradingCloseTradeMarket<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingABI,
          'closeTradeMarket'
        >['abi'],
        'closeTradeMarket'
      > & { functionName?: 'closeTradeMarket' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'closeTradeMarket'> & {
        abi?: never
        functionName?: 'closeTradeMarket'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'closeTradeMarket'>({
    abi: tradingABI,
    functionName: 'closeTradeMarket',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"closeTradeMarketTimeout"`.
 */
export function useTradingCloseTradeMarketTimeout<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingABI,
          'closeTradeMarketTimeout'
        >['abi'],
        'closeTradeMarketTimeout'
      > & { functionName?: 'closeTradeMarketTimeout' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingABI,
        'closeTradeMarketTimeout'
      > & {
        abi?: never
        functionName?: 'closeTradeMarketTimeout'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'closeTradeMarketTimeout'>({
    abi: tradingABI,
    functionName: 'closeTradeMarketTimeout',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"delegatedAction"`.
 */
export function useTradingDelegatedAction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'delegatedAction'>['abi'],
        'delegatedAction'
      > & { functionName?: 'delegatedAction' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'delegatedAction'> & {
        abi?: never
        functionName?: 'delegatedAction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'delegatedAction'>({
    abi: tradingABI,
    functionName: 'delegatedAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"done"`.
 */
export function useTradingDone<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'done'>['abi'],
        'done'
      > & { functionName?: 'done' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'done'> & {
        abi?: never
        functionName?: 'done'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'done'>({
    abi: tradingABI,
    functionName: 'done',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"executeLimitOrder"`.
 */
export function useTradingExecuteLimitOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingABI,
          'executeLimitOrder'
        >['abi'],
        'executeLimitOrder'
      > & { functionName?: 'executeLimitOrder' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'executeLimitOrder'> & {
        abi?: never
        functionName?: 'executeLimitOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'executeLimitOrder'>({
    abi: tradingABI,
    functionName: 'executeLimitOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"openTrade"`.
 */
export function useTradingOpenTrade<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'openTrade'>['abi'],
        'openTrade'
      > & { functionName?: 'openTrade' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'openTrade'> & {
        abi?: never
        functionName?: 'openTrade'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'openTrade'>({
    abi: tradingABI,
    functionName: 'openTrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"openTradeMarketTimeout"`.
 */
export function useTradingOpenTradeMarketTimeout<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingABI,
          'openTradeMarketTimeout'
        >['abi'],
        'openTradeMarketTimeout'
      > & { functionName?: 'openTradeMarketTimeout' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingABI,
        'openTradeMarketTimeout'
      > & {
        abi?: never
        functionName?: 'openTradeMarketTimeout'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'openTradeMarketTimeout'>({
    abi: tradingABI,
    functionName: 'openTradeMarketTimeout',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"pause"`.
 */
export function useTradingPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'pause'>({
    abi: tradingABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"removeDelegate"`.
 */
export function useTradingRemoveDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'removeDelegate'>['abi'],
        'removeDelegate'
      > & { functionName?: 'removeDelegate' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'removeDelegate'> & {
        abi?: never
        functionName?: 'removeDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'removeDelegate'>({
    abi: tradingABI,
    functionName: 'removeDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"setDelegate"`.
 */
export function useTradingSetDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'setDelegate'>['abi'],
        'setDelegate'
      > & { functionName?: 'setDelegate' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'setDelegate'> & {
        abi?: never
        functionName?: 'setDelegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'setDelegate'>({
    abi: tradingABI,
    functionName: 'setDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"setLimitOrdersTimelock"`.
 */
export function useTradingSetLimitOrdersTimelock<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingABI,
          'setLimitOrdersTimelock'
        >['abi'],
        'setLimitOrdersTimelock'
      > & { functionName?: 'setLimitOrdersTimelock' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingABI,
        'setLimitOrdersTimelock'
      > & {
        abi?: never
        functionName?: 'setLimitOrdersTimelock'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'setLimitOrdersTimelock'>({
    abi: tradingABI,
    functionName: 'setLimitOrdersTimelock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"setMarketOrdersTimeout"`.
 */
export function useTradingSetMarketOrdersTimeout<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingABI,
          'setMarketOrdersTimeout'
        >['abi'],
        'setMarketOrdersTimeout'
      > & { functionName?: 'setMarketOrdersTimeout' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingABI,
        'setMarketOrdersTimeout'
      > & {
        abi?: never
        functionName?: 'setMarketOrdersTimeout'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'setMarketOrdersTimeout'>({
    abi: tradingABI,
    functionName: 'setMarketOrdersTimeout',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"setMaxPosDai"`.
 */
export function useTradingSetMaxPosDai<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'setMaxPosDai'>['abi'],
        'setMaxPosDai'
      > & { functionName?: 'setMaxPosDai' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'setMaxPosDai'> & {
        abi?: never
        functionName?: 'setMaxPosDai'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'setMaxPosDai'>({
    abi: tradingABI,
    functionName: 'setMaxPosDai',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"updateOpenLimitOrder"`.
 */
export function useTradingUpdateOpenLimitOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingABI,
          'updateOpenLimitOrder'
        >['abi'],
        'updateOpenLimitOrder'
      > & { functionName?: 'updateOpenLimitOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingABI,
        'updateOpenLimitOrder'
      > & {
        abi?: never
        functionName?: 'updateOpenLimitOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'updateOpenLimitOrder'>({
    abi: tradingABI,
    functionName: 'updateOpenLimitOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"updateSl"`.
 */
export function useTradingUpdateSl<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'updateSl'>['abi'],
        'updateSl'
      > & { functionName?: 'updateSl' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'updateSl'> & {
        abi?: never
        functionName?: 'updateSl'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'updateSl'>({
    abi: tradingABI,
    functionName: 'updateSl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"updateTp"`.
 */
export function useTradingUpdateTp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingABI, 'updateTp'>['abi'],
        'updateTp'
      > & { functionName?: 'updateTp' }
    : UseContractWriteConfig<TMode, typeof tradingABI, 'updateTp'> & {
        abi?: never
        functionName?: 'updateTp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingABI, 'updateTp'>({
    abi: tradingABI,
    functionName: 'updateTp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__.
 */
export function usePrepareTradingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"cancelOpenLimitOrder"`.
 */
export function usePrepareTradingCancelOpenLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'cancelOpenLimitOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'cancelOpenLimitOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'cancelOpenLimitOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"closeTradeMarket"`.
 */
export function usePrepareTradingCloseTradeMarket(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'closeTradeMarket'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'closeTradeMarket',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'closeTradeMarket'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"closeTradeMarketTimeout"`.
 */
export function usePrepareTradingCloseTradeMarketTimeout(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'closeTradeMarketTimeout'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'closeTradeMarketTimeout',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingABI,
    'closeTradeMarketTimeout'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"delegatedAction"`.
 */
export function usePrepareTradingDelegatedAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'delegatedAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'delegatedAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'delegatedAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"done"`.
 */
export function usePrepareTradingDone(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'done'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'done',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'done'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"executeLimitOrder"`.
 */
export function usePrepareTradingExecuteLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'executeLimitOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'executeLimitOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'executeLimitOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"openTrade"`.
 */
export function usePrepareTradingOpenTrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'openTrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'openTrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'openTrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"openTradeMarketTimeout"`.
 */
export function usePrepareTradingOpenTradeMarketTimeout(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'openTradeMarketTimeout'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'openTradeMarketTimeout',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingABI,
    'openTradeMarketTimeout'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareTradingPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"removeDelegate"`.
 */
export function usePrepareTradingRemoveDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'removeDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'removeDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'removeDelegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"setDelegate"`.
 */
export function usePrepareTradingSetDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'setDelegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'setDelegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'setDelegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"setLimitOrdersTimelock"`.
 */
export function usePrepareTradingSetLimitOrdersTimelock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'setLimitOrdersTimelock'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'setLimitOrdersTimelock',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingABI,
    'setLimitOrdersTimelock'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"setMarketOrdersTimeout"`.
 */
export function usePrepareTradingSetMarketOrdersTimeout(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'setMarketOrdersTimeout'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'setMarketOrdersTimeout',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingABI,
    'setMarketOrdersTimeout'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"setMaxPosDai"`.
 */
export function usePrepareTradingSetMaxPosDai(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'setMaxPosDai'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'setMaxPosDai',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'setMaxPosDai'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"updateOpenLimitOrder"`.
 */
export function usePrepareTradingUpdateOpenLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'updateOpenLimitOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'updateOpenLimitOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'updateOpenLimitOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"updateSl"`.
 */
export function usePrepareTradingUpdateSl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'updateSl'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'updateSl',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'updateSl'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingABI}__ and `functionName` set to `"updateTp"`.
 */
export function usePrepareTradingUpdateTp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingABI, 'updateTp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingABI,
    functionName: 'updateTp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingABI, 'updateTp'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__.
 */
export function useTradingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    ...config,
  } as UseContractEventConfig<typeof tradingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"ChainlinkCallbackTimeout"`.
 */
export function useTradingChainlinkCallbackTimeoutEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'ChainlinkCallbackTimeout'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'ChainlinkCallbackTimeout',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'ChainlinkCallbackTimeout'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"CouldNotCloseTrade"`.
 */
export function useTradingCouldNotCloseTradeEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'CouldNotCloseTrade'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'CouldNotCloseTrade',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'CouldNotCloseTrade'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"Done"`.
 */
export function useTradingDoneEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'Done'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'Done',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'Done'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"LimitOrderInitiated"`.
 */
export function useTradingLimitOrderInitiatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'LimitOrderInitiated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'LimitOrderInitiated',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'LimitOrderInitiated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"MarketOrderInitiated"`.
 */
export function useTradingMarketOrderInitiatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'MarketOrderInitiated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'MarketOrderInitiated',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'MarketOrderInitiated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"NumberUpdated"`.
 */
export function useTradingNumberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'NumberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'NumberUpdated',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'NumberUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"OpenLimitCanceled"`.
 */
export function useTradingOpenLimitCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'OpenLimitCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'OpenLimitCanceled',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'OpenLimitCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"OpenLimitPlaced"`.
 */
export function useTradingOpenLimitPlacedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'OpenLimitPlaced'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'OpenLimitPlaced',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'OpenLimitPlaced'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"OpenLimitUpdated"`.
 */
export function useTradingOpenLimitUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'OpenLimitUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'OpenLimitUpdated',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'OpenLimitUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"Paused"`.
 */
export function useTradingPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"SlUpdateInitiated"`.
 */
export function useTradingSlUpdateInitiatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'SlUpdateInitiated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'SlUpdateInitiated',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'SlUpdateInitiated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"SlUpdated"`.
 */
export function useTradingSlUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'SlUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'SlUpdated',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'SlUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingABI}__ and `eventName` set to `"TpUpdated"`.
 */
export function useTradingTpUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingABI, 'TpUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingABI,
    eventName: 'TpUpdated',
    ...config,
  } as UseContractEventConfig<typeof tradingABI, 'TpUpdated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tradingCallbacksABI}__.
 */
export function useTradingCallbacks(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: tradingCallbacksABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingCallbacksABI}__.
 */
export function useTradingCallbacksRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tradingCallbacksABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingCallbacksABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingCallbacksABI,
    ...config,
  } as UseContractReadConfig<
    typeof tradingCallbacksABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"isDone"`.
 */
export function useTradingCallbacksIsDone<
  TSelectData = ReadContractResult<typeof tradingCallbacksABI, 'isDone'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingCallbacksABI, 'isDone', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingCallbacksABI,
    functionName: 'isDone',
    ...config,
  } as UseContractReadConfig<typeof tradingCallbacksABI, 'isDone', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"isPaused"`.
 */
export function useTradingCallbacksIsPaused<
  TSelectData = ReadContractResult<typeof tradingCallbacksABI, 'isPaused'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingCallbacksABI, 'isPaused', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingCallbacksABI,
    functionName: 'isPaused',
    ...config,
  } as UseContractReadConfig<
    typeof tradingCallbacksABI,
    'isPaused',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"pairInfos"`.
 */
export function useTradingCallbacksPairInfos<
  TSelectData = ReadContractResult<typeof tradingCallbacksABI, 'pairInfos'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingCallbacksABI, 'pairInfos', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingCallbacksABI,
    functionName: 'pairInfos',
    ...config,
  } as UseContractReadConfig<
    typeof tradingCallbacksABI,
    'pairInfos',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"storageT"`.
 */
export function useTradingCallbacksStorageT<
  TSelectData = ReadContractResult<typeof tradingCallbacksABI, 'storageT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingCallbacksABI, 'storageT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingCallbacksABI,
    functionName: 'storageT',
    ...config,
  } as UseContractReadConfig<
    typeof tradingCallbacksABI,
    'storageT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__.
 */
export function useTradingCallbacksWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingCallbacksABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof tradingCallbacksABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingCallbacksABI, TFunctionName>({
    abi: tradingCallbacksABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"closeTradeMarketCallback"`.
 */
export function useTradingCallbacksCloseTradeMarketCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingCallbacksABI,
          'closeTradeMarketCallback'
        >['abi'],
        'closeTradeMarketCallback'
      > & { functionName?: 'closeTradeMarketCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingCallbacksABI,
        'closeTradeMarketCallback'
      > & {
        abi?: never
        functionName?: 'closeTradeMarketCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingCallbacksABI,
    'closeTradeMarketCallback'
  >({
    abi: tradingCallbacksABI,
    functionName: 'closeTradeMarketCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"done"`.
 */
export function useTradingCallbacksDone<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingCallbacksABI, 'done'>['abi'],
        'done'
      > & { functionName?: 'done' }
    : UseContractWriteConfig<TMode, typeof tradingCallbacksABI, 'done'> & {
        abi?: never
        functionName?: 'done'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingCallbacksABI, 'done'>({
    abi: tradingCallbacksABI,
    functionName: 'done',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"executeCloseLimitOrderCallback"`.
 */
export function useTradingCallbacksExecuteCloseLimitOrderCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingCallbacksABI,
          'executeCloseLimitOrderCallback'
        >['abi'],
        'executeCloseLimitOrderCallback'
      > & { functionName?: 'executeCloseLimitOrderCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingCallbacksABI,
        'executeCloseLimitOrderCallback'
      > & {
        abi?: never
        functionName?: 'executeCloseLimitOrderCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingCallbacksABI,
    'executeCloseLimitOrderCallback'
  >({
    abi: tradingCallbacksABI,
    functionName: 'executeCloseLimitOrderCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"executeOpenLimitOrderCallback"`.
 */
export function useTradingCallbacksExecuteOpenLimitOrderCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingCallbacksABI,
          'executeOpenLimitOrderCallback'
        >['abi'],
        'executeOpenLimitOrderCallback'
      > & { functionName?: 'executeOpenLimitOrderCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingCallbacksABI,
        'executeOpenLimitOrderCallback'
      > & {
        abi?: never
        functionName?: 'executeOpenLimitOrderCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingCallbacksABI,
    'executeOpenLimitOrderCallback'
  >({
    abi: tradingCallbacksABI,
    functionName: 'executeOpenLimitOrderCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"initialize"`.
 */
export function useTradingCallbacksInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingCallbacksABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingCallbacksABI,
        'initialize'
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingCallbacksABI, 'initialize'>({
    abi: tradingCallbacksABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"openTradeMarketCallback"`.
 */
export function useTradingCallbacksOpenTradeMarketCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingCallbacksABI,
          'openTradeMarketCallback'
        >['abi'],
        'openTradeMarketCallback'
      > & { functionName?: 'openTradeMarketCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingCallbacksABI,
        'openTradeMarketCallback'
      > & {
        abi?: never
        functionName?: 'openTradeMarketCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingCallbacksABI,
    'openTradeMarketCallback'
  >({
    abi: tradingCallbacksABI,
    functionName: 'openTradeMarketCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"pause"`.
 */
export function useTradingCallbacksPause<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingCallbacksABI, 'pause'>['abi'],
        'pause'
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<TMode, typeof tradingCallbacksABI, 'pause'> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingCallbacksABI, 'pause'>({
    abi: tradingCallbacksABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"updateSlCallback"`.
 */
export function useTradingCallbacksUpdateSlCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingCallbacksABI,
          'updateSlCallback'
        >['abi'],
        'updateSlCallback'
      > & { functionName?: 'updateSlCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingCallbacksABI,
        'updateSlCallback'
      > & {
        abi?: never
        functionName?: 'updateSlCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingCallbacksABI,
    'updateSlCallback'
  >({
    abi: tradingCallbacksABI,
    functionName: 'updateSlCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__.
 */
export function usePrepareTradingCallbacksWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingCallbacksABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingCallbacksABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"closeTradeMarketCallback"`.
 */
export function usePrepareTradingCallbacksCloseTradeMarketCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingCallbacksABI,
      'closeTradeMarketCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    functionName: 'closeTradeMarketCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingCallbacksABI,
    'closeTradeMarketCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"done"`.
 */
export function usePrepareTradingCallbacksDone(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingCallbacksABI, 'done'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    functionName: 'done',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingCallbacksABI, 'done'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"executeCloseLimitOrderCallback"`.
 */
export function usePrepareTradingCallbacksExecuteCloseLimitOrderCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingCallbacksABI,
      'executeCloseLimitOrderCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    functionName: 'executeCloseLimitOrderCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingCallbacksABI,
    'executeCloseLimitOrderCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"executeOpenLimitOrderCallback"`.
 */
export function usePrepareTradingCallbacksExecuteOpenLimitOrderCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingCallbacksABI,
      'executeOpenLimitOrderCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    functionName: 'executeOpenLimitOrderCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingCallbacksABI,
    'executeOpenLimitOrderCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareTradingCallbacksInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingCallbacksABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingCallbacksABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"openTradeMarketCallback"`.
 */
export function usePrepareTradingCallbacksOpenTradeMarketCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingCallbacksABI,
      'openTradeMarketCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    functionName: 'openTradeMarketCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingCallbacksABI,
    'openTradeMarketCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareTradingCallbacksPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingCallbacksABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingCallbacksABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingCallbacksABI}__ and `functionName` set to `"updateSlCallback"`.
 */
export function usePrepareTradingCallbacksUpdateSlCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingCallbacksABI,
      'updateSlCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingCallbacksABI,
    functionName: 'updateSlCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingCallbacksABI,
    'updateSlCallback'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__.
 */
export function useTradingCallbacksEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"DaiVaultFeeCharged"`.
 */
export function useTradingCallbacksDaiVaultFeeChargedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'DaiVaultFeeCharged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'DaiVaultFeeCharged',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'DaiVaultFeeCharged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"DevGovFeeCharged"`.
 */
export function useTradingCallbacksDevGovFeeChargedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'DevGovFeeCharged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'DevGovFeeCharged',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'DevGovFeeCharged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"Done"`.
 */
export function useTradingCallbacksDoneEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'Done'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'Done',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'Done'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"Initialized"`.
 */
export function useTradingCallbacksInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"LimitExecuted"`.
 */
export function useTradingCallbacksLimitExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'LimitExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'LimitExecuted',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'LimitExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"MarketCloseCanceled"`.
 */
export function useTradingCallbacksMarketCloseCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'MarketCloseCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'MarketCloseCanceled',
    ...config,
  } as UseContractEventConfig<
    typeof tradingCallbacksABI,
    'MarketCloseCanceled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"MarketExecuted"`.
 */
export function useTradingCallbacksMarketExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'MarketExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'MarketExecuted',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'MarketExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"MarketOpenCanceled"`.
 */
export function useTradingCallbacksMarketOpenCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'MarketOpenCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'MarketOpenCanceled',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'MarketOpenCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"Pause"`.
 */
export function useTradingCallbacksPauseEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'Pause'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'Pause',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'Pause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"SlCanceled"`.
 */
export function useTradingCallbacksSlCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'SlCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'SlCanceled',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'SlCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingCallbacksABI}__ and `eventName` set to `"SlUpdated"`.
 */
export function useTradingCallbacksSlUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingCallbacksABI, 'SlUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingCallbacksABI,
    eventName: 'SlUpdated',
    ...config,
  } as UseContractEventConfig<typeof tradingCallbacksABI, 'SlUpdated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tradingStorageABI}__.
 */
export function useTradingStorage(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: tradingStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__.
 */
export function useTradingStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tradingStorageABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"PRECISION"`.
 */
export function useTradingStoragePrecision<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'PRECISION'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'PRECISION', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'PRECISION',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'PRECISION',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"callbacks"`.
 */
export function useTradingStorageCallbacks<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'callbacks'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'callbacks', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'callbacks',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'callbacks',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"dai"`.
 */
export function useTradingStorageDai<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'dai'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'dai', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'dai',
    ...config,
  } as UseContractReadConfig<typeof tradingStorageABI, 'dai', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"dev"`.
 */
export function useTradingStorageDev<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'dev'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'dev', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'dev',
    ...config,
  } as UseContractReadConfig<typeof tradingStorageABI, 'dev', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"devFeesDai"`.
 */
export function useTradingStorageDevFeesDai<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'devFeesDai'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'devFeesDai', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'devFeesDai',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'devFeesDai',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"firstEmptyOpenLimitIndex"`.
 */
export function useTradingStorageFirstEmptyOpenLimitIndex<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'firstEmptyOpenLimitIndex'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'firstEmptyOpenLimitIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'firstEmptyOpenLimitIndex',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'firstEmptyOpenLimitIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"firstEmptyTradeIndex"`.
 */
export function useTradingStorageFirstEmptyTradeIndex<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'firstEmptyTradeIndex'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'firstEmptyTradeIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'firstEmptyTradeIndex',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'firstEmptyTradeIndex',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"getOpenLimitOrder"`.
 */
export function useTradingStorageGetOpenLimitOrder<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'getOpenLimitOrder'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'getOpenLimitOrder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'getOpenLimitOrder',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'getOpenLimitOrder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"getOpenLimitOrders"`.
 */
export function useTradingStorageGetOpenLimitOrders<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'getOpenLimitOrders'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'getOpenLimitOrders',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'getOpenLimitOrders',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'getOpenLimitOrders',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"getPendingOrderIds"`.
 */
export function useTradingStorageGetPendingOrderIds<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'getPendingOrderIds'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'getPendingOrderIds',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'getPendingOrderIds',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'getPendingOrderIds',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"getSupportedTokens"`.
 */
export function useTradingStorageGetSupportedTokens<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'getSupportedTokens'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'getSupportedTokens',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'getSupportedTokens',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'getSupportedTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"gov"`.
 */
export function useTradingStorageGov<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'gov'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'gov', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'gov',
    ...config,
  } as UseContractReadConfig<typeof tradingStorageABI, 'gov', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"govFeesDai"`.
 */
export function useTradingStorageGovFeesDai<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'govFeesDai'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'govFeesDai', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'govFeesDai',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'govFeesDai',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"hasOpenLimitOrder"`.
 */
export function useTradingStorageHasOpenLimitOrder<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'hasOpenLimitOrder'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'hasOpenLimitOrder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'hasOpenLimitOrder',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'hasOpenLimitOrder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"isTradingContract"`.
 */
export function useTradingStorageIsTradingContract<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'isTradingContract'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'isTradingContract',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'isTradingContract',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'isTradingContract',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"isTriggered"`.
 */
export function useTradingStorageIsTriggered<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'isTriggered'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'isTriggered', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'isTriggered',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'isTriggered',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"maxPendingMarketOrders"`.
 */
export function useTradingStorageMaxPendingMarketOrders<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'maxPendingMarketOrders'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'maxPendingMarketOrders',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'maxPendingMarketOrders',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'maxPendingMarketOrders',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"maxTradesPerPair"`.
 */
export function useTradingStorageMaxTradesPerPair<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'maxTradesPerPair'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'maxTradesPerPair',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'maxTradesPerPair',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'maxTradesPerPair',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"nftRewards"`.
 */
export function useTradingStorageNftRewards<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'nftRewards'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'nftRewards', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'nftRewards',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'nftRewards',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"openInterestDai"`.
 */
export function useTradingStorageOpenInterestDai<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'openInterestDai'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'openInterestDai',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'openInterestDai',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'openInterestDai',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"openLimitOrderIds"`.
 */
export function useTradingStorageOpenLimitOrderIds<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'openLimitOrderIds'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'openLimitOrderIds',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'openLimitOrderIds',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'openLimitOrderIds',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"openLimitOrderTypes"`.
 */
export function useTradingStorageOpenLimitOrderTypes<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'openLimitOrderTypes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'openLimitOrderTypes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'openLimitOrderTypes',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'openLimitOrderTypes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"openLimitOrders"`.
 */
export function useTradingStorageOpenLimitOrders<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'openLimitOrders'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'openLimitOrders',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'openLimitOrders',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'openLimitOrders',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"openLimitOrdersCount"`.
 */
export function useTradingStorageOpenLimitOrdersCount<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'openLimitOrdersCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'openLimitOrdersCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'openLimitOrdersCount',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'openLimitOrdersCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"openTrades"`.
 */
export function useTradingStorageOpenTrades<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'openTrades'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'openTrades', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'openTrades',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'openTrades',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"openTradesCount"`.
 */
export function useTradingStorageOpenTradesCount<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'openTradesCount'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'openTradesCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'openTradesCount',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'openTradesCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"openTradesInfo"`.
 */
export function useTradingStorageOpenTradesInfo<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'openTradesInfo'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'openTradesInfo',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'openTradesInfo',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'openTradesInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"pairTraders"`.
 */
export function useTradingStoragePairTraders<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'pairTraders'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'pairTraders', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'pairTraders',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'pairTraders',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"pairTradersArray"`.
 */
export function useTradingStoragePairTradersArray<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'pairTradersArray'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'pairTradersArray',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'pairTradersArray',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'pairTradersArray',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"pairTradersId"`.
 */
export function useTradingStoragePairTradersId<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'pairTradersId'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'pairTradersId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'pairTradersId',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'pairTradersId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"pendingMarketCloseCount"`.
 */
export function useTradingStoragePendingMarketCloseCount<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'pendingMarketCloseCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'pendingMarketCloseCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'pendingMarketCloseCount',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'pendingMarketCloseCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"pendingMarketOpenCount"`.
 */
export function useTradingStoragePendingMarketOpenCount<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'pendingMarketOpenCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'pendingMarketOpenCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'pendingMarketOpenCount',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'pendingMarketOpenCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"pendingOrderIds"`.
 */
export function useTradingStoragePendingOrderIds<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'pendingOrderIds'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'pendingOrderIds',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'pendingOrderIds',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'pendingOrderIds',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"pendingOrderIdsCount"`.
 */
export function useTradingStoragePendingOrderIdsCount<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'pendingOrderIdsCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'pendingOrderIdsCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'pendingOrderIdsCount',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'pendingOrderIdsCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"priceAggregator"`.
 */
export function useTradingStoragePriceAggregator<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'priceAggregator'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'priceAggregator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'priceAggregator',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'priceAggregator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"reqID_pendingLimitOrder"`.
 */
export function useTradingStorageReqIdPendingLimitOrder<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'reqID_pendingLimitOrder'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'reqID_pendingLimitOrder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'reqID_pendingLimitOrder',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'reqID_pendingLimitOrder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"reqID_pendingMarketOrder"`.
 */
export function useTradingStorageReqIdPendingMarketOrder<
  TSelectData = ReadContractResult<
    typeof tradingStorageABI,
    'reqID_pendingMarketOrder'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'reqID_pendingMarketOrder',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'reqID_pendingMarketOrder',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'reqID_pendingMarketOrder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"supportedTokens"`.
 */
export function useTradingStorageSupportedTokens<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'supportedTokens'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'supportedTokens',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'supportedTokens',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'supportedTokens',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"trading"`.
 */
export function useTradingStorageTrading<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'trading'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'trading', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'trading',
    ...config,
  } as UseContractReadConfig<typeof tradingStorageABI, 'trading', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"triggeredLimits"`.
 */
export function useTradingStorageTriggeredLimits<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'triggeredLimits'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof tradingStorageABI,
      'triggeredLimits',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'triggeredLimits',
    ...config,
  } as UseContractReadConfig<
    typeof tradingStorageABI,
    'triggeredLimits',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"vault"`.
 */
export function useTradingStorageVault<
  TSelectData = ReadContractResult<typeof tradingStorageABI, 'vault'>,
>(
  config: Omit<
    UseContractReadConfig<typeof tradingStorageABI, 'vault', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tradingStorageABI,
    functionName: 'vault',
    ...config,
  } as UseContractReadConfig<typeof tradingStorageABI, 'vault', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__.
 */
export function useTradingStorageWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingStorageABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, TFunctionName>({
    abi: tradingStorageABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"addSupportedToken"`.
 */
export function useTradingStorageAddSupportedToken<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'addSupportedToken'
        >['abi'],
        'addSupportedToken'
      > & { functionName?: 'addSupportedToken' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'addSupportedToken'
      > & {
        abi?: never
        functionName?: 'addSupportedToken'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'addSupportedToken'>(
    {
      abi: tradingStorageABI,
      functionName: 'addSupportedToken',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"addTradingContract"`.
 */
export function useTradingStorageAddTradingContract<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'addTradingContract'
        >['abi'],
        'addTradingContract'
      > & { functionName?: 'addTradingContract' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'addTradingContract'
      > & {
        abi?: never
        functionName?: 'addTradingContract'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'addTradingContract'
  >({
    abi: tradingStorageABI,
    functionName: 'addTradingContract',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"claimFees"`.
 */
export function useTradingStorageClaimFees<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'claimFees'
        >['abi'],
        'claimFees'
      > & { functionName?: 'claimFees' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'claimFees'> & {
        abi?: never
        functionName?: 'claimFees'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'claimFees'>({
    abi: tradingStorageABI,
    functionName: 'claimFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"handleDevGovFees"`.
 */
export function useTradingStorageHandleDevGovFees<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'handleDevGovFees'
        >['abi'],
        'handleDevGovFees'
      > & { functionName?: 'handleDevGovFees' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'handleDevGovFees'
      > & {
        abi?: never
        functionName?: 'handleDevGovFees'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'handleDevGovFees'>({
    abi: tradingStorageABI,
    functionName: 'handleDevGovFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"initialize"`.
 */
export function useTradingStorageInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'initialize'>({
    abi: tradingStorageABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"removeTradingContract"`.
 */
export function useTradingStorageRemoveTradingContract<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'removeTradingContract'
        >['abi'],
        'removeTradingContract'
      > & { functionName?: 'removeTradingContract' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'removeTradingContract'
      > & {
        abi?: never
        functionName?: 'removeTradingContract'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'removeTradingContract'
  >({
    abi: tradingStorageABI,
    functionName: 'removeTradingContract',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setCallbacks"`.
 */
export function useTradingStorageSetCallbacks<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'setCallbacks'
        >['abi'],
        'setCallbacks'
      > & { functionName?: 'setCallbacks' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'setCallbacks'
      > & {
        abi?: never
        functionName?: 'setCallbacks'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'setCallbacks'>({
    abi: tradingStorageABI,
    functionName: 'setCallbacks',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setDev"`.
 */
export function useTradingStorageSetDev<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingStorageABI, 'setDev'>['abi'],
        'setDev'
      > & { functionName?: 'setDev' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'setDev'> & {
        abi?: never
        functionName?: 'setDev'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'setDev'>({
    abi: tradingStorageABI,
    functionName: 'setDev',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setGov"`.
 */
export function useTradingStorageSetGov<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingStorageABI, 'setGov'>['abi'],
        'setGov'
      > & { functionName?: 'setGov' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'setGov'> & {
        abi?: never
        functionName?: 'setGov'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'setGov'>({
    abi: tradingStorageABI,
    functionName: 'setGov',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setMaxOpenInterestDai"`.
 */
export function useTradingStorageSetMaxOpenInterestDai<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'setMaxOpenInterestDai'
        >['abi'],
        'setMaxOpenInterestDai'
      > & { functionName?: 'setMaxOpenInterestDai' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'setMaxOpenInterestDai'
      > & {
        abi?: never
        functionName?: 'setMaxOpenInterestDai'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'setMaxOpenInterestDai'
  >({
    abi: tradingStorageABI,
    functionName: 'setMaxOpenInterestDai',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setMaxPendingMarketOrders"`.
 */
export function useTradingStorageSetMaxPendingMarketOrders<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'setMaxPendingMarketOrders'
        >['abi'],
        'setMaxPendingMarketOrders'
      > & { functionName?: 'setMaxPendingMarketOrders' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'setMaxPendingMarketOrders'
      > & {
        abi?: never
        functionName?: 'setMaxPendingMarketOrders'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'setMaxPendingMarketOrders'
  >({
    abi: tradingStorageABI,
    functionName: 'setMaxPendingMarketOrders',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setMaxTradesPerPair"`.
 */
export function useTradingStorageSetMaxTradesPerPair<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'setMaxTradesPerPair'
        >['abi'],
        'setMaxTradesPerPair'
      > & { functionName?: 'setMaxTradesPerPair' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'setMaxTradesPerPair'
      > & {
        abi?: never
        functionName?: 'setMaxTradesPerPair'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'setMaxTradesPerPair'
  >({
    abi: tradingStorageABI,
    functionName: 'setMaxTradesPerPair',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setOpenLimitOrderType"`.
 */
export function useTradingStorageSetOpenLimitOrderType<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'setOpenLimitOrderType'
        >['abi'],
        'setOpenLimitOrderType'
      > & { functionName?: 'setOpenLimitOrderType' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'setOpenLimitOrderType'
      > & {
        abi?: never
        functionName?: 'setOpenLimitOrderType'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'setOpenLimitOrderType'
  >({
    abi: tradingStorageABI,
    functionName: 'setOpenLimitOrderType',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setPriceAggregator"`.
 */
export function useTradingStorageSetPriceAggregator<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'setPriceAggregator'
        >['abi'],
        'setPriceAggregator'
      > & { functionName?: 'setPriceAggregator' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'setPriceAggregator'
      > & {
        abi?: never
        functionName?: 'setPriceAggregator'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'setPriceAggregator'
  >({
    abi: tradingStorageABI,
    functionName: 'setPriceAggregator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setTrading"`.
 */
export function useTradingStorageSetTrading<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'setTrading'
        >['abi'],
        'setTrading'
      > & { functionName?: 'setTrading' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'setTrading'> & {
        abi?: never
        functionName?: 'setTrading'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'setTrading'>({
    abi: tradingStorageABI,
    functionName: 'setTrading',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setVault"`.
 */
export function useTradingStorageSetVault<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingStorageABI, 'setVault'>['abi'],
        'setVault'
      > & { functionName?: 'setVault' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'setVault'> & {
        abi?: never
        functionName?: 'setVault'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'setVault'>({
    abi: tradingStorageABI,
    functionName: 'setVault',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storeLimitOrderToTrigger"`.
 */
export function useTradingStorageStoreLimitOrderToTrigger<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'storeLimitOrderToTrigger'
        >['abi'],
        'storeLimitOrderToTrigger'
      > & { functionName?: 'storeLimitOrderToTrigger' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'storeLimitOrderToTrigger'
      > & {
        abi?: never
        functionName?: 'storeLimitOrderToTrigger'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'storeLimitOrderToTrigger'
  >({
    abi: tradingStorageABI,
    functionName: 'storeLimitOrderToTrigger',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storeOpenLimitOrder"`.
 */
export function useTradingStorageStoreOpenLimitOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'storeOpenLimitOrder'
        >['abi'],
        'storeOpenLimitOrder'
      > & { functionName?: 'storeOpenLimitOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'storeOpenLimitOrder'
      > & {
        abi?: never
        functionName?: 'storeOpenLimitOrder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'storeOpenLimitOrder'
  >({
    abi: tradingStorageABI,
    functionName: 'storeOpenLimitOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storePendingLimitOrder"`.
 */
export function useTradingStorageStorePendingLimitOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'storePendingLimitOrder'
        >['abi'],
        'storePendingLimitOrder'
      > & { functionName?: 'storePendingLimitOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'storePendingLimitOrder'
      > & {
        abi?: never
        functionName?: 'storePendingLimitOrder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'storePendingLimitOrder'
  >({
    abi: tradingStorageABI,
    functionName: 'storePendingLimitOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storePendingMarketOrder"`.
 */
export function useTradingStorageStorePendingMarketOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'storePendingMarketOrder'
        >['abi'],
        'storePendingMarketOrder'
      > & { functionName?: 'storePendingMarketOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'storePendingMarketOrder'
      > & {
        abi?: never
        functionName?: 'storePendingMarketOrder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'storePendingMarketOrder'
  >({
    abi: tradingStorageABI,
    functionName: 'storePendingMarketOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storeTrade"`.
 */
export function useTradingStorageStoreTrade<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'storeTrade'
        >['abi'],
        'storeTrade'
      > & { functionName?: 'storeTrade' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'storeTrade'> & {
        abi?: never
        functionName?: 'storeTrade'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'storeTrade'>({
    abi: tradingStorageABI,
    functionName: 'storeTrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"transferDai"`.
 */
export function useTradingStorageTransferDai<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'transferDai'
        >['abi'],
        'transferDai'
      > & { functionName?: 'transferDai' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'transferDai'> & {
        abi?: never
        functionName?: 'transferDai'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'transferDai'>({
    abi: tradingStorageABI,
    functionName: 'transferDai',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterOpenLimitOrder"`.
 */
export function useTradingStorageUnregisterOpenLimitOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'unregisterOpenLimitOrder'
        >['abi'],
        'unregisterOpenLimitOrder'
      > & { functionName?: 'unregisterOpenLimitOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'unregisterOpenLimitOrder'
      > & {
        abi?: never
        functionName?: 'unregisterOpenLimitOrder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'unregisterOpenLimitOrder'
  >({
    abi: tradingStorageABI,
    functionName: 'unregisterOpenLimitOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterPendingLimitOrder"`.
 */
export function useTradingStorageUnregisterPendingLimitOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'unregisterPendingLimitOrder'
        >['abi'],
        'unregisterPendingLimitOrder'
      > & { functionName?: 'unregisterPendingLimitOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'unregisterPendingLimitOrder'
      > & {
        abi?: never
        functionName?: 'unregisterPendingLimitOrder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'unregisterPendingLimitOrder'
  >({
    abi: tradingStorageABI,
    functionName: 'unregisterPendingLimitOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterPendingMarketOrder"`.
 */
export function useTradingStorageUnregisterPendingMarketOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'unregisterPendingMarketOrder'
        >['abi'],
        'unregisterPendingMarketOrder'
      > & { functionName?: 'unregisterPendingMarketOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'unregisterPendingMarketOrder'
      > & {
        abi?: never
        functionName?: 'unregisterPendingMarketOrder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'unregisterPendingMarketOrder'
  >({
    abi: tradingStorageABI,
    functionName: 'unregisterPendingMarketOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterTrade"`.
 */
export function useTradingStorageUnregisterTrade<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'unregisterTrade'
        >['abi'],
        'unregisterTrade'
      > & { functionName?: 'unregisterTrade' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'unregisterTrade'
      > & {
        abi?: never
        functionName?: 'unregisterTrade'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'unregisterTrade'>({
    abi: tradingStorageABI,
    functionName: 'unregisterTrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterTrigger"`.
 */
export function useTradingStorageUnregisterTrigger<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'unregisterTrigger'
        >['abi'],
        'unregisterTrigger'
      > & { functionName?: 'unregisterTrigger' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'unregisterTrigger'
      > & {
        abi?: never
        functionName?: 'unregisterTrigger'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'unregisterTrigger'>(
    {
      abi: tradingStorageABI,
      functionName: 'unregisterTrigger',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"updateOpenLimitOrder"`.
 */
export function useTradingStorageUpdateOpenLimitOrder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'updateOpenLimitOrder'
        >['abi'],
        'updateOpenLimitOrder'
      > & { functionName?: 'updateOpenLimitOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof tradingStorageABI,
        'updateOpenLimitOrder'
      > & {
        abi?: never
        functionName?: 'updateOpenLimitOrder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof tradingStorageABI,
    'updateOpenLimitOrder'
  >({
    abi: tradingStorageABI,
    functionName: 'updateOpenLimitOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"updateSl"`.
 */
export function useTradingStorageUpdateSl<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingStorageABI, 'updateSl'>['abi'],
        'updateSl'
      > & { functionName?: 'updateSl' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'updateSl'> & {
        abi?: never
        functionName?: 'updateSl'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'updateSl'>({
    abi: tradingStorageABI,
    functionName: 'updateSl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"updateTp"`.
 */
export function useTradingStorageUpdateTp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tradingStorageABI, 'updateTp'>['abi'],
        'updateTp'
      > & { functionName?: 'updateTp' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'updateTp'> & {
        abi?: never
        functionName?: 'updateTp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'updateTp'>({
    abi: tradingStorageABI,
    functionName: 'updateTp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"updateTrade"`.
 */
export function useTradingStorageUpdateTrade<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof tradingStorageABI,
          'updateTrade'
        >['abi'],
        'updateTrade'
      > & { functionName?: 'updateTrade' }
    : UseContractWriteConfig<TMode, typeof tradingStorageABI, 'updateTrade'> & {
        abi?: never
        functionName?: 'updateTrade'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tradingStorageABI, 'updateTrade'>({
    abi: tradingStorageABI,
    functionName: 'updateTrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__.
 */
export function usePrepareTradingStorageWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"addSupportedToken"`.
 */
export function usePrepareTradingStorageAddSupportedToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'addSupportedToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'addSupportedToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'addSupportedToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"addTradingContract"`.
 */
export function usePrepareTradingStorageAddTradingContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'addTradingContract'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'addTradingContract',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'addTradingContract'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"claimFees"`.
 */
export function usePrepareTradingStorageClaimFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'claimFees'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'claimFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'claimFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"handleDevGovFees"`.
 */
export function usePrepareTradingStorageHandleDevGovFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'handleDevGovFees'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'handleDevGovFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'handleDevGovFees'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareTradingStorageInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"removeTradingContract"`.
 */
export function usePrepareTradingStorageRemoveTradingContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'removeTradingContract'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'removeTradingContract',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'removeTradingContract'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setCallbacks"`.
 */
export function usePrepareTradingStorageSetCallbacks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setCallbacks'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setCallbacks',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setCallbacks'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setDev"`.
 */
export function usePrepareTradingStorageSetDev(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setDev'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setDev',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setDev'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setGov"`.
 */
export function usePrepareTradingStorageSetGov(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setGov'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setGov',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setGov'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setMaxOpenInterestDai"`.
 */
export function usePrepareTradingStorageSetMaxOpenInterestDai(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'setMaxOpenInterestDai'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setMaxOpenInterestDai',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'setMaxOpenInterestDai'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setMaxPendingMarketOrders"`.
 */
export function usePrepareTradingStorageSetMaxPendingMarketOrders(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'setMaxPendingMarketOrders'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setMaxPendingMarketOrders',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'setMaxPendingMarketOrders'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setMaxTradesPerPair"`.
 */
export function usePrepareTradingStorageSetMaxTradesPerPair(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'setMaxTradesPerPair'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setMaxTradesPerPair',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'setMaxTradesPerPair'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setOpenLimitOrderType"`.
 */
export function usePrepareTradingStorageSetOpenLimitOrderType(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'setOpenLimitOrderType'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setOpenLimitOrderType',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'setOpenLimitOrderType'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setPriceAggregator"`.
 */
export function usePrepareTradingStorageSetPriceAggregator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'setPriceAggregator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setPriceAggregator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'setPriceAggregator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setTrading"`.
 */
export function usePrepareTradingStorageSetTrading(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setTrading'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setTrading',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setTrading'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"setVault"`.
 */
export function usePrepareTradingStorageSetVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setVault'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'setVault',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'setVault'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storeLimitOrderToTrigger"`.
 */
export function usePrepareTradingStorageStoreLimitOrderToTrigger(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'storeLimitOrderToTrigger'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'storeLimitOrderToTrigger',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'storeLimitOrderToTrigger'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storeOpenLimitOrder"`.
 */
export function usePrepareTradingStorageStoreOpenLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'storeOpenLimitOrder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'storeOpenLimitOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'storeOpenLimitOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storePendingLimitOrder"`.
 */
export function usePrepareTradingStorageStorePendingLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'storePendingLimitOrder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'storePendingLimitOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'storePendingLimitOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storePendingMarketOrder"`.
 */
export function usePrepareTradingStorageStorePendingMarketOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'storePendingMarketOrder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'storePendingMarketOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'storePendingMarketOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"storeTrade"`.
 */
export function usePrepareTradingStorageStoreTrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'storeTrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'storeTrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'storeTrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"transferDai"`.
 */
export function usePrepareTradingStorageTransferDai(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'transferDai'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'transferDai',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'transferDai'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterOpenLimitOrder"`.
 */
export function usePrepareTradingStorageUnregisterOpenLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'unregisterOpenLimitOrder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'unregisterOpenLimitOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'unregisterOpenLimitOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterPendingLimitOrder"`.
 */
export function usePrepareTradingStorageUnregisterPendingLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'unregisterPendingLimitOrder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'unregisterPendingLimitOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'unregisterPendingLimitOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterPendingMarketOrder"`.
 */
export function usePrepareTradingStorageUnregisterPendingMarketOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'unregisterPendingMarketOrder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'unregisterPendingMarketOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'unregisterPendingMarketOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterTrade"`.
 */
export function usePrepareTradingStorageUnregisterTrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'unregisterTrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'unregisterTrade',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'unregisterTrade'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"unregisterTrigger"`.
 */
export function usePrepareTradingStorageUnregisterTrigger(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'unregisterTrigger'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'unregisterTrigger',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'unregisterTrigger'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"updateOpenLimitOrder"`.
 */
export function usePrepareTradingStorageUpdateOpenLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof tradingStorageABI,
      'updateOpenLimitOrder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'updateOpenLimitOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tradingStorageABI,
    'updateOpenLimitOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"updateSl"`.
 */
export function usePrepareTradingStorageUpdateSl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'updateSl'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'updateSl',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'updateSl'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"updateTp"`.
 */
export function usePrepareTradingStorageUpdateTp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'updateTp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'updateTp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'updateTp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tradingStorageABI}__ and `functionName` set to `"updateTrade"`.
 */
export function usePrepareTradingStorageUpdateTrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tradingStorageABI, 'updateTrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tradingStorageABI,
    functionName: 'updateTrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tradingStorageABI, 'updateTrade'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__.
 */
export function useTradingStorageEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"AddressUpdated"`.
 */
export function useTradingStorageAddressUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'AddressUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'AddressUpdated',
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, 'AddressUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"Initialized"`.
 */
export function useTradingStorageInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"LimitOrderTriggered"`.
 */
export function useTradingStorageLimitOrderTriggeredEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'LimitOrderTriggered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'LimitOrderTriggered',
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, 'LimitOrderTriggered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"NumberUpdated"`.
 */
export function useTradingStorageNumberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'NumberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'NumberUpdated',
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, 'NumberUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"NumberUpdatedPair"`.
 */
export function useTradingStorageNumberUpdatedPairEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'NumberUpdatedPair'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'NumberUpdatedPair',
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, 'NumberUpdatedPair'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"SupportedTokenAdded"`.
 */
export function useTradingStorageSupportedTokenAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'SupportedTokenAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'SupportedTokenAdded',
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, 'SupportedTokenAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"TradingContractAdded"`.
 */
export function useTradingStorageTradingContractAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'TradingContractAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'TradingContractAdded',
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, 'TradingContractAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"TradingContractRemoved"`.
 */
export function useTradingStorageTradingContractRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'TradingContractRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'TradingContractRemoved',
    ...config,
  } as UseContractEventConfig<
    typeof tradingStorageABI,
    'TradingContractRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tradingStorageABI}__ and `eventName` set to `"TriggerUnregistered"`.
 */
export function useTradingStorageTriggerUnregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof tradingStorageABI, 'TriggerUnregistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tradingStorageABI,
    eventName: 'TriggerUnregistered',
    ...config,
  } as UseContractEventConfig<typeof tradingStorageABI, 'TriggerUnregistered'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vaultABI}__.
 */
export function useVault(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: vaultABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__.
 */
export function useVaultRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vaultABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: vaultABI, ...config } as UseContractReadConfig<
    typeof vaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"allowance"`.
 */
export function useVaultAllowance<
  TSelectData = ReadContractResult<typeof vaultABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"asset"`.
 */
export function useVaultAsset<
  TSelectData = ReadContractResult<typeof vaultABI, 'asset'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'asset', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'asset',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'asset', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useVaultBalanceOf<
  TSelectData = ReadContractResult<typeof vaultABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"convertToAssets"`.
 */
export function useVaultConvertToAssets<
  TSelectData = ReadContractResult<typeof vaultABI, 'convertToAssets'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'convertToAssets', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'convertToAssets',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'convertToAssets', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"convertToShares"`.
 */
export function useVaultConvertToShares<
  TSelectData = ReadContractResult<typeof vaultABI, 'convertToShares'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'convertToShares', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'convertToShares',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'convertToShares', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"decimals"`.
 */
export function useVaultDecimals<
  TSelectData = ReadContractResult<typeof vaultABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"maxDeposit"`.
 */
export function useVaultMaxDeposit<
  TSelectData = ReadContractResult<typeof vaultABI, 'maxDeposit'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'maxDeposit', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'maxDeposit',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'maxDeposit', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"maxMint"`.
 */
export function useVaultMaxMint<
  TSelectData = ReadContractResult<typeof vaultABI, 'maxMint'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'maxMint', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'maxMint',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'maxMint', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"maxRedeem"`.
 */
export function useVaultMaxRedeem<
  TSelectData = ReadContractResult<typeof vaultABI, 'maxRedeem'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'maxRedeem', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'maxRedeem',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'maxRedeem', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"maxWithdraw"`.
 */
export function useVaultMaxWithdraw<
  TSelectData = ReadContractResult<typeof vaultABI, 'maxWithdraw'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'maxWithdraw', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'maxWithdraw',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'maxWithdraw', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"name"`.
 */
export function useVaultName<
  TSelectData = ReadContractResult<typeof vaultABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"previewDeposit"`.
 */
export function useVaultPreviewDeposit<
  TSelectData = ReadContractResult<typeof vaultABI, 'previewDeposit'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'previewDeposit', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'previewDeposit',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'previewDeposit', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"previewMint"`.
 */
export function useVaultPreviewMint<
  TSelectData = ReadContractResult<typeof vaultABI, 'previewMint'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'previewMint', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'previewMint',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'previewMint', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"previewRedeem"`.
 */
export function useVaultPreviewRedeem<
  TSelectData = ReadContractResult<typeof vaultABI, 'previewRedeem'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'previewRedeem', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'previewRedeem',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'previewRedeem', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"previewWithdraw"`.
 */
export function useVaultPreviewWithdraw<
  TSelectData = ReadContractResult<typeof vaultABI, 'previewWithdraw'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'previewWithdraw', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'previewWithdraw',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'previewWithdraw', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"symbol"`.
 */
export function useVaultSymbol<
  TSelectData = ReadContractResult<typeof vaultABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"totalAssets"`.
 */
export function useVaultTotalAssets<
  TSelectData = ReadContractResult<typeof vaultABI, 'totalAssets'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'totalAssets', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'totalAssets',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'totalAssets', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"totalClosedPnl"`.
 */
export function useVaultTotalClosedPnl<
  TSelectData = ReadContractResult<typeof vaultABI, 'totalClosedPnl'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'totalClosedPnl', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'totalClosedPnl',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'totalClosedPnl', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"totalLiability"`.
 */
export function useVaultTotalLiability<
  TSelectData = ReadContractResult<typeof vaultABI, 'totalLiability'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'totalLiability', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'totalLiability',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'totalLiability', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"totalRewards"`.
 */
export function useVaultTotalRewards<
  TSelectData = ReadContractResult<typeof vaultABI, 'totalRewards'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'totalRewards', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'totalRewards',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'totalRewards', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useVaultTotalSupply<
  TSelectData = ReadContractResult<typeof vaultABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vaultABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof vaultABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__.
 */
export function useVaultWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof vaultABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, TFunctionName>({
    abi: vaultABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"approve"`.
 */
export function useVaultApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'approve'>({
    abi: vaultABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useVaultDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'decreaseAllowance'>({
    abi: vaultABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"deposit"`.
 */
export function useVaultDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'deposit'>({
    abi: vaultABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"distributeReward"`.
 */
export function useVaultDistributeReward<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'distributeReward'>['abi'],
        'distributeReward'
      > & { functionName?: 'distributeReward' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'distributeReward'> & {
        abi?: never
        functionName?: 'distributeReward'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'distributeReward'>({
    abi: vaultABI,
    functionName: 'distributeReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useVaultIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'increaseAllowance'>({
    abi: vaultABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"mint"`.
 */
export function useVaultMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'mint'>({
    abi: vaultABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"receiveAssets"`.
 */
export function useVaultReceiveAssets<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'receiveAssets'>['abi'],
        'receiveAssets'
      > & { functionName?: 'receiveAssets' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'receiveAssets'> & {
        abi?: never
        functionName?: 'receiveAssets'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'receiveAssets'>({
    abi: vaultABI,
    functionName: 'receiveAssets',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"redeem"`.
 */
export function useVaultRedeem<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'redeem'>['abi'],
        'redeem'
      > & { functionName?: 'redeem' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'redeem'> & {
        abi?: never
        functionName?: 'redeem'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'redeem'>({
    abi: vaultABI,
    functionName: 'redeem',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"sendAssets"`.
 */
export function useVaultSendAssets<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'sendAssets'>['abi'],
        'sendAssets'
      > & { functionName?: 'sendAssets' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'sendAssets'> & {
        abi?: never
        functionName?: 'sendAssets'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'sendAssets'>({
    abi: vaultABI,
    functionName: 'sendAssets',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"transfer"`.
 */
export function useVaultTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'transfer'>({
    abi: vaultABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useVaultTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'transferFrom'>({
    abi: vaultABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"withdraw"`.
 */
export function useVaultWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof vaultABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultABI, 'withdraw'>({
    abi: vaultABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__.
 */
export function usePrepareVaultWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareVaultApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareVaultDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareVaultDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"distributeReward"`.
 */
export function usePrepareVaultDistributeReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'distributeReward'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'distributeReward',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'distributeReward'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareVaultIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareVaultMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"receiveAssets"`.
 */
export function usePrepareVaultReceiveAssets(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'receiveAssets'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'receiveAssets',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'receiveAssets'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"redeem"`.
 */
export function usePrepareVaultRedeem(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'redeem'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'redeem',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'redeem'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"sendAssets"`.
 */
export function usePrepareVaultSendAssets(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'sendAssets'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'sendAssets',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'sendAssets'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareVaultTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareVaultTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareVaultWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__.
 */
export function useVaultEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    ...config,
  } as UseContractEventConfig<typeof vaultABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"Approval"`.
 */
export function useVaultApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"AssetsReceived"`.
 */
export function useVaultAssetsReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'AssetsReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'AssetsReceived',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'AssetsReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"AssetsSent"`.
 */
export function useVaultAssetsSentEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'AssetsSent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'AssetsSent',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'AssetsSent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"Deposit"`.
 */
export function useVaultDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"Transfer"`.
 */
export function useVaultTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useVaultWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultABI, 'Withdraw'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultABI,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof vaultABI, 'Withdraw'>)
}
